"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7807],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),u=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},c=function(e){var a=u(e.components);return t.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=r,y=d["".concat(i,".").concat(g)]||d[g]||p[g]||o;return n?t.createElement(y,s(s({ref:a},c),{},{components:n})):t.createElement(y,s({ref:a},c))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,a,n)=>{n.d(a,{Z:()=>s});var t=n(7294),r=n(6010);const o="tabItem_Ymn6";function s(e){let{children:a,hidden:n,className:s}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},a)}},4866:(e,a,n)=>{n.d(a,{Z:()=>P});var t=n(7462),r=n(7294),o=n(6010),s=n(2466),l=n(6775),i=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:r}}=e;return{value:a,label:n,attributes:t,default:r}}))}function d(e){const{values:a,children:n}=e;return(0,r.useMemo)((()=>{const e=a??p(n);return function(e){const a=(0,u.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function g(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function y(e){let{queryString:a=!1,groupId:n}=e;const t=(0,l.k6)(),o=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(t.location.search);a.set(o,e),t.replace({...t.location,search:a.toString()})}),[o,t])]}function m(e){const{defaultValue:a,queryString:n=!1,groupId:t}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!g({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:o}))),[i,u]=y({queryString:n,groupId:t}),[p,m]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[t,o]=(0,c.Nk)(n);return[t,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:t}),h=(()=>{const e=i??p;return g({value:e,tabValues:o})?e:null})();(0,r.useEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var h=n(2389);const f="tabList__CuJ",w="tabItem_LNqP";function k(e){let{className:a,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const a=e.currentTarget,n=c.indexOf(a),t=u[n].value;t!==l&&(p(a),i(t))},g=e=>{var a;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}null==(a=n)||a.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},a)},u.map((e=>{let{value:a,label:n,attributes:s}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>c.push(e),onKeyDown:g,onClick:d},s,{className:(0,o.Z)("tabs__item",w,null==s?void 0:s.className,{"tabs__item--active":l===a})}),n??a)})))}function b(e){let{lazy:a,children:n,selectedValue:t}=e;if(a){const e=n.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==t}))))}function v(e){const a=m(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f)},r.createElement(k,(0,t.Z)({},e,a)),r.createElement(b,(0,t.Z)({},e,a)))}function P(e){const a=(0,h.Z)();return r.createElement(v,(0,t.Z)({key:String(a)},e))}},9997:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=n(7462),r=(n(7294),n(3905));n(4866),n(5162);const o={sidebar_label:"Upgrade LSP6 Key Manager",sidebar_position:4,describtion:"This guide explains how to change or upgrade the LSP6 Key Manager of a Universal Profile."},s="Upgrade the LSP6 Key Manager",l={unversionedId:"guides/key-manager/upgrade-lsp6",id:"guides/key-manager/upgrade-lsp6",title:"Upgrade the LSP6 Key Manager",description:"You will need a Universal Profile that you can control via its KeyManager to follow this guide.",source:"@site/docs/guides/key-manager/upgrade-lsp6.md",sourceDirName:"guides/key-manager",slug:"/guides/key-manager/upgrade-lsp6",permalink:"/guides/key-manager/upgrade-lsp6",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/key-manager/upgrade-lsp6.md",tags:[],version:"current",lastUpdatedAt:1673371419,formattedLastUpdatedAt:"Jan 10, 2023",sidebarPosition:4,frontMatter:{sidebar_label:"Upgrade LSP6 Key Manager",sidebar_position:4,describtion:"This guide explains how to change or upgrade the LSP6 Key Manager of a Universal Profile."},sidebar:"guidesSidebar",previous:{title:"Execute Relay Transactions",permalink:"/guides/key-manager/execute-relay-call"},next:{title:"Set the default implementation",permalink:"/guides/universal-receiver-delegate/set-default-implementation"}},i={},u=[{value:"Setup",id:"setup",level:2},{value:"Step 1 - Set up the constants and imports",id:"step-1---set-up-the-constants-and-imports",level:2},{value:"Step 2 - Initialize the controller account",id:"step-2---initialize-the-controller-account",level:2},{value:"Step 3 - Initialize the old LSP6 Key Manager",id:"step-3---initialize-the-old-lsp6-key-manager",level:2},{value:"Step 4 - Deploy the new LSP6 Key Manager",id:"step-4---deploy-the-new-lsp6-key-manager",level:2},{value:"Step 5 - Upgrade your Key Manager",id:"step-5---upgrade-your-key-manager",level:2},{value:"Step 5.1 - Transfer Ownership to your new Key Manager",id:"step-51---transfer-ownership-to-your-new-key-manager",level:3},{value:"Step 5.2 - Accept Ownership from your new Key Manager",id:"step-52---accept-ownership-from-your-new-key-manager",level:3},{value:"Final code",id:"final-code",level:2},{value:"Test the new LSP6 Key Manager",id:"test-the-new-lsp6-key-manager",level:2}],c={toc:u};function p(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrade-the-lsp6-key-manager"},"Upgrade the LSP6 Key Manager"),(0,r.kt)("admonition",{title:"Requirements",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You will need a Universal Profile that you can control via its ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"KeyManager")," to follow this guide.\nIf you don't have a Universal Profile yet, follow our previous guide ",(0,r.kt)("a",{parentName:"p",href:"/guides/universal-profile/create-profile"},(0,r.kt)("strong",{parentName:"a"},"Create a Universal Profile"))," or look at the ",(0,r.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/universal-profile"},(0,r.kt)("em",{parentName:"a"},"lsp-factory.js"))," docs.")),(0,r.kt)("p",null,"In this guide, we will learn how to upgrade the LSP6 Key Manager of your Universal Profile to the latest version available."),(0,r.kt)("p",null,"By the end of this guide, you will know how to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deploy a new LSP6 Key Manager with the last updates."),(0,r.kt)("li",{parentName:"ul"},"Upgrade your Key Manager by changing the owner of your UP from your old to your new Key Manager.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @lukso/lsp-smart-contracts web3\n")),(0,r.kt)("h2",{id:"step-1---set-up-the-constants-and-imports"},"Step 1 - Set up the constants and imports"),(0,r.kt)("p",null,"Create a JavaScript file and add the following imports on the top of the file:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"privateKey"),": private key of a controller address, ",(0,r.kt)("strong",{parentName:"li"},"MUST")," have ",(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CHANGEOWNER"))," permission."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keyManagerAddress"),": address of the current LSP6 Key Manager."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"universalProfileAddress"),": address of your Universal Profile.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json' assert { type: 'json' };\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst privateKey = '0x...';\nconst universalProfileAddress = '0x...';\nconst keyManagerAddress = '0x...';\n")),(0,r.kt)("h2",{id:"step-2---initialize-the-controller-account"},"Step 2 - Initialize the controller account"),(0,r.kt)("p",null,"In order to send any transaction on the blockchain you need an account, in our case that account MUST have ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CHANGEOWNER"))," permission on the Universal Profile that will have its LSP6 Key Manager upgraded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const account = web3.eth.accounts.privateKeyToAccount(privateKey);\nweb3.eth.accounts.wallet.add(account);\n")),(0,r.kt)("h2",{id:"step-3---initialize-the-old-lsp6-key-manager"},"Step 3 - Initialize the old LSP6 Key Manager"),(0,r.kt)("p",null,"In order to transfer ownership of your Universal Profile, you need to initialize your current LSP6 Key Manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const oldKeyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n")),(0,r.kt)("h2",{id:"step-4---deploy-the-new-lsp6-key-manager"},"Step 4 - Deploy the new LSP6 Key Manager"),(0,r.kt)("p",null,"Deploy a new LSP6 Key Manager with the latest updates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const NewKeyManager = new web3.eth.Contract(LSP6KeyManager.abi);\nconst newKeyManager = await NewKeyManager.deploy({\n  data: LSP6KeyManager.bytecode,\n  arguments: [universalProfileAddress],\n}).send({\n  from: account.address,\n  gas: 3000000,\n  gasPrice: '1000000000',\n});\n\nconsole.log(newKeyManager._address);\n")),(0,r.kt)("h2",{id:"step-5---upgrade-your-key-manager"},"Step 5 - Upgrade your Key Manager"),(0,r.kt)("h3",{id:"step-51---transfer-ownership-to-your-new-key-manager"},"Step 5.1 - Transfer Ownership to your new Key Manager"),(0,r.kt)("p",null,"Create a payload for the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp14-ownable-2-step#transferownership"},(0,r.kt)("inlineCode",{parentName:"a"},"transferOwnership(address)"))," function and shift the ownership of your Universal Profile from your current LSP6 Key Manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const transferOwnershipPayload =\n  web3.eth.abi.encodeFunctionSignature('transferOwnership(address)') +\n  web3.eth.abi.encodeParameter('address', newKeyManager._address).substring(2);\n\nawait oldKeyManager.methods['execute(bytes)'](transferOwnershipPayload).send({\n  from: account.address,\n  gas: 1000000,\n  gasPrice: '1000000000',\n});\n")),(0,r.kt)("h3",{id:"step-52---accept-ownership-from-your-new-key-manager"},"Step 5.2 - Accept Ownership from your new Key Manager"),(0,r.kt)("p",null,"Create a payload for the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp14-ownable-2-step#acceptownership"},(0,r.kt)("inlineCode",{parentName:"a"},"claimOwnership()"))," function and take the ownership of your Universal Profile from your new LSP6 Key Manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const claimOwnershipPayload = web3.eth.abi.encodeFunctionSignature('claimOwnership()');\n\nawait newKeyManager.methods['execute(bytes)'](claimOwnershipPayload).send({\n  from: account.address,\n  gas: 1000000,\n  gasPrice: '1000000000',\n});\n")),(0,r.kt)("admonition",{title:"\ud83e\udd73",type:"success"},(0,r.kt)("p",{parentName:"admonition"},"The upgrade has been completed successfully.")),(0,r.kt)("h2",{id:"final-code"},"Final code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="upgrade-lsp6.js"',title:'"upgrade-lsp6.js"'},"import LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json' assert { type: 'json' };\nimport Web3 from 'web3';\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst privateKey = '0x...';\nconst universalProfileAddress = '0x...';\nconst keyManagerAddress = '0x...';\n\nconst upgradeLSP6 = async () => {\n  // Initialize the controller account\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  web3.eth.accounts.wallet.add(account);\n\n  // Initialize your current LSP6 Key Manager\n  const oldKeyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n\n  // Deploy a new LSP6 Key Manager\n  const NewKeyManager = new web3.eth.Contract(LSP6KeyManager.abi);\n  const newKeyManager = await NewKeyManager.deploy({\n    data: LSP6KeyManager.bytecode,\n    arguments: [universalProfileAddress],\n  }).send({\n    from: account.address,\n    gas: 3000000,\n    gasPrice: '1000000000',\n  });\n\n  // Transfer the ownership of your Universal Profile from the current LSP6 Key Manager to a new LSP6 Key Manager\n  const transferOwnershipPayload =\n    web3.eth.abi.encodeFunctionSignature('transferOwnership(address)') +\n    web3.eth.abi.encodeParameter('address', newKeyManager._address).substring(2);\n\n  await oldKeyManager.methods['execute(bytes)'](transferOwnershipPayload).send({\n    from: account.address,\n    gas: 1000000,\n    gasPrice: '1000000000',\n  });\n\n  // Accept the ownership of your Universal Profile from the new LSP6 Key Manager\n  const claimOwnershipPayload = web3.eth.abi.encodeFunctionSignature('claimOwnership()');\n\n  await newKeyManager.methods['execute(bytes)'](claimOwnershipPayload).send({\n    from: account.address,\n    gas: 1000000,\n    gasPrice: '1000000000',\n  });\n};\n\nawait upgradeLSP6();\n")),(0,r.kt)("h2",{id:"test-the-new-lsp6-key-manager"},"Test the new LSP6 Key Manager"),(0,r.kt)("p",null,"We can now check the owner of the Universal Profile. If everything went through, the owner should be the address of the new LSP6 Key Manager.\nCreate the following file with the name ",(0,r.kt)("inlineCode",{parentName:"p"},"test-new-lsp6.js")," and run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node test-new-lsp6.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="test-new-lsp6.js"',title:'"test-new-lsp6.js"'},"import LSP0ERC725YAccount from '@lukso/lsp-smart-contracts/artifacts/LSP0ERC725YAccount.json' assert { type: 'json' };\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json' assert { type: 'json' };\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst keyManagerAddress = '0x...';\n\nconst testLSP6 = async () => {\n  const universalProfile = new web3.eth.Contract(LSP0ERC725YAccount.abi, universalProfileAddress);\n\n  const universalProfileOwner = await universalProfile.methods.owner().call();\n\n  console.log(`The new owner of the Universal Profile is: ${universalProfileOwner}`);\n  console.log(`The old LSP6 Key Manager is at address: ${keyManagerAdderss}`);\n\n  const keyManager = new web3.eth.Contract(LSP6KeyManager.abi, universalProfileOwner);\n\n  const keyManagerTarget = await keyManager.methods.target().call();\n\n  console.log(`The address of the Universal Profile is: ${universalProfile._address}`);\n  console.log(`The target of the new LSP6 Key Manager: ${keyManagerTarget}`);\n};\n\nawait testLSP6();\n")))}p.isMDXComponent=!0}}]);