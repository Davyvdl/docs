"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7389],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var s=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,a=function(e,t){if(null==e)return{};var r,s,a={},n=Object.keys(e);for(s=0;s<n.length;s++)r=n[s],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)r=n[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=s.createContext({}),l=function(e){var t=s.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return s.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||n;return r?s.createElement(f,o(o({ref:t},c),{},{components:r})):s.createElement(f,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,o=new Array(n);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<n;l++)o[l]=r[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4693:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var s=r(7462),a=(r(7294),r(3905));const n={sidebar_label:"Restrict Addresses to Vaults",sidebar_position:4},o="Restrict Addresses to Vaults",i={unversionedId:"guides/vault/restrict-addresses-to-vaults",id:"guides/vault/restrict-addresses-to-vaults",title:"Restrict Addresses to Vaults",description:"As mentioned in the first Vault guide, the Vault can be used to restrict different addresses (protocols, other devices, etc..) to execute and set data on it instead of doing it directly on the Universal Profile.",source:"@site/docs/guides/vault/restrict-addresses-to-vaults.md",sourceDirName:"guides/vault",slug:"/guides/vault/restrict-addresses-to-vaults",permalink:"/guides/vault/restrict-addresses-to-vaults",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/restrict-addresses-to-vaults.md",tags:[],version:"current",lastUpdatedAt:1661109600,formattedLastUpdatedAt:"Aug 21, 2022",sidebarPosition:4,frontMatter:{sidebar_label:"Restrict Addresses to Vaults",sidebar_position:4},sidebar:"guidesSidebar",previous:{title:"Interact With Contracts",permalink:"/guides/vault/interact-with-contracts"},next:{title:"Create a Universal Profile",permalink:"/guides/universal-profile/create-profile"}},d={},l=[{value:"Granting Permission to 3rd Parties",id:"granting-permission-to-3rd-parties",level:2},{value:"Use AllowedAddresses permission for the 3rd Parties",id:"use-allowedaddresses-permission-for-the-3rd-parties",level:2}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"restrict-addresses-to-vaults"},"Restrict Addresses to Vaults"),(0,a.kt)("p",null,"As mentioned in the ",(0,a.kt)("a",{parentName:"p",href:"/guides/vault/create-a-vault"},"first Vault guide"),", the ",(0,a.kt)("strong",{parentName:"p"},"Vault")," can be used to restrict different addresses (protocols, other devices, etc..) to execute and set data on it instead of doing it directly on the Universal Profile. "),(0,a.kt)("p",null,"This way, when ",(0,a.kt)("strong",{parentName:"p"},"granting a third party permissions")," to execute through your profile, this third party will only be able to interact with the Vault, and all the other assets will be safe."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Guide - Restrict addresses to an LSP9Vault",src:r(7360).Z,width:"2762",height:"1448"})),(0,a.kt)("h2",{id:"granting-permission-to-3rd-parties"},"Granting Permission to 3rd Parties"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Make sure not to grant the 3rd party address the ",(0,a.kt)("strong",{parentName:"p"},"SUPER Permissions"),". Otherwise, the ",(0,a.kt)("strong",{parentName:"p"},"AllowedAddresses restriction")," will not work.")),(0,a.kt)("p",null,"Check the guide of ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/guides/key-manager/give-permissions"},"granting permissions to 3rd Parties")),", and make sure to grant the 3rd party address the ",(0,a.kt)("strong",{parentName:"p"},"CALL Permission"),"."),(0,a.kt)("h2",{id:"use-allowedaddresses-permission-for-the-3rd-parties"},"Use AllowedAddresses permission for the 3rd Parties"),(0,a.kt)("p",null,"In this step, after granting the 3rd party the permission ",(0,a.kt)("strong",{parentName:"p"},"CALL"),", we will need to ",(0,a.kt)("strong",{parentName:"p"},"restrict the address of the 3rd party")," to only interact with the ",(0,a.kt)("strong",{parentName:"p"},"Vault address"),". We will be using the ",(0,a.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#allowed-addresses"},"AllowedAddresses permission")," from the Key Manager."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setting Allowed Addresses for the 3rd party address"',title:'"Setting',Allowed:!0,Addresses:!0,for:!0,the:!0,"3rd":!0,party:!0,'address"':!0},"import Web3 from 'web3';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport constants from \"@lukso/lsp-smart-contracts/constants.js\";\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key\nconst myEOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n\nconst myUniversalProfileAddress = \"0x..\" // address of the UP\nconst myVaultAddress = \"0x..\" // address of the Vault\nconst thirdPartyAddress = '0x..' // address of the third party you want to restrict\n\n// create an instance of the UP\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUniversalProfileAddress);\n\nconst allowedAddressesDataKey = // constructing the data key of allowed addresses \n  constants.ERC725YKeys.LSP6[\"AddressPermissions:AllowedAddresses\"] + \n  thirdPartyAddress.substring(2);  // of the 3rd party\n\n// the data value holding the addresses that the 3rd party is allowed to interact with\nconst arrayOfAddresses = web3.eth.abi.encodeParameter(\"address[]\", [myVaultAddress]);\n\n// encode setData payload on the UP\nconst setDataPayload = await myUP.methods[\n    \"setData(bytes32,bytes)\"\n  ](allowedAddressesDataKey, arrayOfAddresses).encodeABI();\n\n// getting the Key Manager address from UP\nconst myKeyManagerAddress = await myUP.methods.owner().call()\n\n// create an instance of the KeyManager\nlet myKM = new web3.eth.Contract(LSP6KeyManager.abi, myKeyManagerAddress);\n\n// execute the setDataPayload on the KM\nawait myKM.methods.execute(setDataPayload).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n    });\n")))}p.isMDXComponent=!0},7360:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/restrict-protocol-to-vault-5430220f8c3675f005ba9acb6bacc12e.jpeg"}}]);