"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[8188],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=l(n),p=s,m=h["".concat(c,".").concat(p)]||h[p]||u[p]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),s=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7462),s=n(7294),r=n(6010),o=n(2389),i=n(7392),c=n(7094),l=n(2466);const d="tabList__CuJ",u="tabItem_LNqP";function h(e){var t,n;const{lazy:o,block:h,defaultValue:p,values:m,groupId:f,className:g}=e,v=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(k,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const S=null===p?p:null!=(t=null!=p?p:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==S&&!k.some((e=>e.value===S)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+S+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:A,setTabGroupChoices:w}=(0,c.U)(),[b,D]=(0,s.useState)(S),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,l.o5)();if(null!=f){const e=A[f];null!=e&&e!==b&&k.some((t=>t.value===e))&&D(e)}const L=e=>{const t=e.currentTarget,n=N.indexOf(t),a=k[n].value;a!==b&&(E(t),D(a),null!=f&&w(f,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=N.indexOf(e.currentTarget)+1;n=null!=(a=N[t])?a:N[0];break}case"ArrowLeft":{var s;const t=N.indexOf(e.currentTarget)-1;n=null!=(s=N[t])?s:N[N.length-1];break}}null==(t=n)||t.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":h},g)},k.map((e=>{let{value:t,label:n,attributes:o}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>N.push(e),onKeyDown:P,onFocus:L,onClick:L},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":b===t})}),null!=n?n:t)}))),o?(0,s.cloneElement)(v.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function p(e){const t=(0,o.Z)();return s.createElement(h,(0,a.Z)({key:String(t)},e))}},9271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),s=(n(7294),n(3905)),r=n(5488),o=n(5162);const i={sidebar_label:"Read Asset Data",sidebar_position:2},c="Read Asset Data",l={unversionedId:"guides/fetch-data/read-asset-data",id:"guides/fetch-data/read-asset-data",title:"Read Asset Data",description:'Complete "ready to use" JSON and JS files are available at the end in the Final Code section.',source:"@site/docs/guides/fetch-data/read-asset-data.md",sourceDirName:"guides/fetch-data",slug:"/guides/fetch-data/read-asset-data",permalink:"/guides/fetch-data/read-asset-data",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/fetch-data/read-asset-data.md",tags:[],version:"current",lastUpdatedAt:1657702192,formattedLastUpdatedAt:"7/13/2022",sidebarPosition:2,frontMatter:{sidebar_label:"Read Asset Data",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Read Profile Data",permalink:"/guides/fetch-data/read-profile-data"},next:{title:"Create an LSP7 Digital Asset (Token)",permalink:"/guides/assets/create-lsp7-digital-asset"}},d={},u=[{value:"Setup",id:"setup",level:2},{value:"Step 1 - Get all assets ever received",id:"step-1---get-all-assets-ever-received",level:2},{value:"Step 2 - Get all assets ever issued",id:"step-2---get-all-assets-ever-issued",level:2},{value:"Step 3 - Check ownership of assets",id:"step-3---check-ownership-of-assets",level:2},{value:"Step 4 - Check the type of an asset",id:"step-4---check-the-type-of-an-asset",level:2},{value:"Step 5 - Receive the encoded asset data",id:"step-5---receive-the-encoded-asset-data",level:2},{value:"Step 6 - Decode the asset data",id:"step-6---decode-the-asset-data",level:2},{value:"Step 7 - Create the storage link",id:"step-7---create-the-storage-link",level:2},{value:"Step 8 - Get the asset data",id:"step-8---get-the-asset-data",level:2},{value:"Final Code",id:"final-code",level:2}],h={toc:u};function p(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"read-asset-data"},"Read Asset Data"),(0,s.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Recommendation")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Complete ",(0,s.kt)("em",{parentName:"p"},'"ready to use"')," JSON and JS files are available at the end in the ",(0,s.kt)("a",{parentName:"p",href:"#final-code"},(0,s.kt)("strong",{parentName:"a"},"Final Code"))," section."))),(0,s.kt)("p",null,"In this guide, we will learn how to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"get all assets ever received by a profile."),(0,s.kt)("li",{parentName:"ul"},"get all assets ever issued by a profile."),(0,s.kt)("li",{parentName:"ul"},"fetch the data of all owned assets.")),(0,s.kt)("div",{style:{textAlign:"center",color:"grey"}},(0,s.kt)("img",{src:n(3866).Z,alt:"Asset example on universalprofile.cloud"}),(0,s.kt)("br",null),(0,s.kt)("i",null,"The ",(0,s.kt)("a",{href:"https://universalprofile.cloud/asset/0xbD14F48DDDe851b812D95431906E629fb9514Db4"},"Lambada Dyed Red White Blue")," asset as seen on UniversalProfile.cloud")),(0,s.kt)("p",null,"We will use:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/v1.7.0/"},"web3.js")," for utility as well as connecting to the LUKSO L14 or L16 network."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../../tools/erc725js/getting-started/"},"erc725.js")," library to check the interface of a profile."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/matthew-andrews/isomorphic-fetch"},"isomorphic-fetch")," to enable you to use ",(0,s.kt)("inlineCode",{parentName:"li"},"fetch()")," in Node.js code."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts"},"lsp-smart-contracts")," to integrate the ABIs for the LUKSO Standards.")),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Open a terminal in the project's folder of your choice and install all required libraries."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install web3 @erc725/erc725.js isomorphic-fetch @lukso/lsp-smart-contracts\n")),(0,s.kt)("h2",{id:"step-1---get-all-assets-ever-received"},"Step 1 - Get all assets ever received"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standard",label:"Current Standard",mdxType:"TabItem"},(0,s.kt)("p",null,"In the ",(0,s.kt)("a",{parentName:"p",href:"./read-profile-data"},"previous guide"),", we learned how to read the Universal Profile properties and use the data key names with the ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchData()")," function of the ",(0,s.kt)("a",{parentName:"p",href:"../../tools/erc725js/getting-started/"},"erc725.js")," library.  In the same way, we can now fetch all ever received assets using ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchData('LSP5ReceivedAssets[]')"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// Import and network setup\nconst Web3 = require("web3");\nconst { ERC725 } = require("@erc725/erc725.js");\nrequire("isomorphic-fetch");\n\n// Static variables\nconst SAMPLE_PROFILE_ADDRESS = "0xa907c1904c22DFd37FF56c1f3c3d795682539196";\nconst RPC_ENDPOINT = "https://rpc.l16.lukso.network";\nconst IPFS_GATEWAY = "https://2eff.lukso.dev/ipfs/";\n\n// Parameters for the ERC725 instance\nconst erc725schema = require("@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json");\nconst provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);\nconst config = { ipfsGateway: IPFS_GATEWAY };\n\n/*\n * Fetch the LSP5 data of the Universal Profile\n * to get its ever received assets\n *\n * @param address of the Universal Profile\n * @return address[] of received assets or custom error\n */\nasync function fetchReceivedAssets(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP5ReceivedAssets[]")\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n// Debug\nfetchReceivedAssets(SAMPLE_PROFILE_ADDRESS).then((profileData) =>\n  console.log(JSON.stringify(profileData, undefined, 2))\n);\n'))),(0,s.kt)(o.Z,{value:"Legacy Standard",label:"Legacy Standard",mdxType:"TabItem"},(0,s.kt)("p",null,"In the ",(0,s.kt)("a",{parentName:"p",href:"./read-profile-data"},"previous guide"),", we learned how to read the Universal Profile properties and use the data key names with the ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchData()")," function of the ",(0,s.kt)("a",{parentName:"p",href:"../../tools/erc725js/getting-started/"},"erc725.js")," library. In the same way, we can now fetch the address of the ",(0,s.kt)("a",{parentName:"p",href:"../../standards/generic-standards/lsp1-universal-receiver/"},"Universal Receiver")," by using ",(0,s.kt)("inlineCode",{parentName:"p"},'fetchData("LSP1UniversalReceiverDelegate")'),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// Import and network setup\nconst Web3 = require("web3");\nconst { ERC725 } = require("@erc725/erc725.js");\nrequire("isomorphic-fetch");\n\n// Static variables\nconst SAMPLE_PROFILE_ADDRESS = "0x0C03fBa782b07bCf810DEb3b7f0595024A444F4e";\nconst RPC_ENDPOINT = "https://rpc.l14.lukso.network";\nconst IPFS_GATEWAY = "https://cloudflare-ipfs.com/ipfs/";\n\n// Parameters for the ERC725 instance\nconst erc725schema = require("@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json");\nconst provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);\nconst config = { ipfsGateway: IPFS_GATEWAY };\n\n /*\n * Fetch the LSP1 data of the Universal Profile\n * to get its Universal Receiver\n *\n * @param address of the Universal Profile\n * @return address of Universal Receiver or custom error\n */\nasync function fetchUniversalReceiverAddress(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP1UniversalReceiverDelegate")\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n// Debug\nfetchUniversalReceiverAddress(SAMPLE_PROFILE_ADDRESS).then((receiverAddress) =>\n  console.log(receiverAddress)\n);\n')),(0,s.kt)("p",null,"Using the Universal Receiver address, we can now call the ",(0,s.kt)("inlineCode",{parentName:"p"},"getAllRawValues()")," function on this contract to retrieve an array of received assets."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"LSP1 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp1_legacy_minimal_abi.json"',title:'"lsp1_legacy_minimal_abi.json"'},'[\n  {\n    "inputs": [],\n    "name": "getAllRawValues",\n    "outputs": [\n      {\n        "internalType": "bytes32[]",\n        "name": "",\n        "type": "bytes32[]"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n// ABI for the Universal Receiver\nconst LSP1MinimalABI = require("./lsp1_legacy_minimal_abi.json");\nconst web3 = new Web3("https://rpc.l14.lukso.network");\n\n/*\n * Get all received assets from the \n * Universal Receiver of the \n * Universal Profile.\n * \n * @param address of the Universal Receiver\n * @return address[] of the received assets\n */\nasync function fetchReceivedAssets(receiverAddress) {\n  const universalReceiver = new web3.eth.Contract(\n    LSP1MinimalABI,\n    receiverAddress\n  );\n\n  let rawValues = [];\n\n  try {\n\n    // Fetch all raw values\n    rawValues = await universalReceiver.methods.getAllRawValues().call();\n  } catch (error) {\n    return console.log("Data from universal receiver could not be loaded");\n  }\n\n  const receivedAssets = [];\n\n  // Retrieve addresses\n  for (let i = 0; i < rawValues.length; i++) {\n    receivedAssets[i] = web3.utils.toChecksumAddress(rawValues[i].substr(26));\n  }\n  return receivedAssets;\n}\n\n// Debug\nfetchUniversalReceiverAddress(SAMPLE_PROFILE_ADDRESS).then((receiverAddress) => {\n  fetchReceivedAssets(receiverAddress).then((receivedAssets) =>\n    console.log(receivedAssets)\n  );\n});\n')))),(0,s.kt)("h2",{id:"step-2---get-all-assets-ever-issued"},"Step 2 - Get all assets ever issued"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standard",label:"Current Standard",mdxType:"TabItem"},(0,s.kt)("p",null,"The same way, we fetched received assets, we can fetch all ever issued assets with the ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchData('LSP12IssuedAssets[]')")," function from the ",(0,s.kt)("a",{parentName:"p",href:"../../tools/erc725js/getting-started/"},"erc725.js")," library."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n/*\n * Fetch the ever issued assets from \n * the Universal Profile\n *\n * @param address of the Universal Profile\n * @return address[] of the issued assets or custom error\n */\nasync function fetchIssuedAssets(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP12IssuedAssets[]");\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n// Debug\nfetchIssuedAssets(SAMPLE_PROFILE_ADDRESS).then((profileData) =>\n  console.log(JSON.stringify(profileData, undefined, 2))\n);\n'))),(0,s.kt)(o.Z,{value:"Legacy Standard",label:"Legacy Standard",mdxType:"TabItem"},(0,s.kt)("details",null,(0,s.kt)("summary",null,"ERC725 Legacy Schema"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_minimal_schema.json"',title:'"erc725_legacy_minimal_schema.json"'},'[\n    {\n       "name":"LSP3IssuedAssets[]",\n       "key":"0x3a47ab5bd3a594c3a8995f8fa58d0876c96819ca4516bd76100c92462f2f9dc0",\n       "keyType":"Array",\n       "valueContent":"Address",\n       "valueType":"address"\n    }\n]\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\nconst ERC725LegacySchema = require("./erc725_legacy_minimal_schema.json");\n\n/*\n * Fetch the ever issued assets from\n * the Universal Profile\n *\n * @param address of the Universal Profile\n * @return address[] of the received assets or custom error\n*/\nasync function fetchIssuedAssets(address) {\n  try {\n    const profile = new ERC725(ERC725LegacySchema, address, provider, config);\n    const result = await profile.getData("LSP3IssuedAssets[]");\n    return result.value;\n  } catch (error) {\n    return console.log("Issued assets could not be fetched");\n  }\n}\n\nfetchIssuedAssets(SAMPLE_PROFILE_ADDRESS).then((issuedAssets) =>\n  console.log(issuedAssets)\n);\n')))),(0,s.kt)("h2",{id:"step-3---check-ownership-of-assets"},"Step 3 - Check ownership of assets"),(0,s.kt)("p",null,"After receiving a list of asset addresses, we can check which assets are owned by the Universal Profile. We can do this by comparing the balances of the assets within the receiver contract. If the ",(0,s.kt)("inlineCode",{parentName:"p"},"balance")," is greater than zero, the asset is still owned by the address."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Difference between Token Ownership")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("ul",{parentName:"div"},(0,s.kt)("li",{parentName:"ul"},"For ",(0,s.kt)("a",{parentName:"li",href:"/standards/nft-2.0/LSP7-Digital-Asset"},"LSP7"),", you will get back the amount of tokens you own."),(0,s.kt)("li",{parentName:"ul"},"For ",(0,s.kt)("a",{parentName:"li",href:"/standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8"),", you will get back the number of NFTs you own (without knowing which specific tokenId you own).")))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standard",label:"Current Standard",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n// ABI for the asset\nconst LSP8 = require("@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json");\n\n// New Web3 instance for LUKSO L16\nconst web3 = new Web3("https://rpc.l16.lukso.network");\n\n/*\n * Return an array of assets  \n * that are owned by the\n * Universal Profile.\n *\n * @param owner of the Universal Profile\n * @return address[] of owned assets\n */\nasync function fetchOwnedAssets(owner) {\n  const digitalAssets = await fetchReceivedAssets(owner);\n  const ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    \n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    const isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n// Debug\nfetchOwnedAssets(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets)\n);\n'))),(0,s.kt)(o.Z,{value:"Legacy Standard",label:"Legacy Standard",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n// ABI for the asset\nconst LSP8 = require("@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json");\n\n/*\n * Return an array of assets  \n * that are owned by the\n * Universal Profile.\n *\n * @param owner of the Universal Profile\n * @return address[] of owned assets\n */\nasync function fetchOwnedAssets(owner) {\n  const receiverAddress = await fetchUniversalReceiverAddress(owner);\n  const digitalAssets = await fetchReceivedAssets(receiverAddress);\n  const ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    \n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    const isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n// Debug\nfetchOwnedAssets(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets)\n);\n')))),(0,s.kt)("h2",{id:"step-4---check-the-type-of-an-asset"},"Step 4 - Check the type of an asset"),(0,s.kt)("p",null,"Now that we have retrieved all the owned assets, we need to check which interface is behind these smart contract addresses, to get their data."),(0,s.kt)("p",null,"UniversalProfile contracts on the ",(0,s.kt)("a",{parentName:"p",href:"https://universalprofile.cloud/"},"profile explorer")," on the LUKSO L14 test network have been deployed using different ",(0,s.kt)("inlineCode",{parentName:"p"},"ERC725Y")," interfaces. We have to know which interface to use, to assure the right interaction and bypass errors."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standards",label:"Current Standards",mdxType:"TabItem"},(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"By using ",(0,s.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.13/contracts.html?highlight=function%20overloading#function-overloading"},"function overloading"),", the ",(0,s.kt)("inlineCode",{parentName:"p"},"ERC725Y")," interface function ",(0,s.kt)("inlineCode",{parentName:"p"},"getData(...)")," can accept:"),(0,s.kt)("ul",{parentName:"div"},(0,s.kt)("li",{parentName:"ul"},"either one data key: ",(0,s.kt)("inlineCode",{parentName:"li"},"getData(key)")," to fetch a single value."),(0,s.kt)("li",{parentName:"ul"},"or an array of data keys: ",(0,s.kt)("inlineCode",{parentName:"li"},"getData(keys[])")," to fetch multiple values at once.")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\nconst SAMPLE_ASSET_ADDRESS = "0x923F49Bac508E4Ec063ac097E00b4a3cAc68a353";\nconst LSP4 = require("@lukso/lsp-smart-contracts/artifacts/LSP4DigitalAssetMetadata.json");\nconst {\n  ERC725Y_INTERFACE_IDS,\n} = require("@erc725/erc725.js/build/main/src/lib/constants");\n\n/*\n * Check the ERC725Y interface of an asset\n *\n * @param assetAddress of the smart contract\n * @return boolean isERC725Y\n */\nasync function checkErc725YInterfaceId(assetAddress) {\n  // Create an instance of the asset\n  const asset = new web3.eth.Contract(LSP4.abi, assetAddress);\n\n  let isERC725Y = false;\n\n  // Check if the contract has a key-value store\n  try {\n    isERC725Y = await asset.methods\n      .supportsInterface(ERC725Y_INTERFACE_IDS["3.0"])\n      .call();\n  } catch (error) {\n    console.log("Address could not be checked for ERC725Y interface");\n  }\n  return isERC725Y;\n}\n\n// Debug\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((isERC725Y) =>\n  console.log(isERC725Y)\n);\n'))),(0,s.kt)(o.Z,{value:"Legacy Standards",label:"Legacy Standards",mdxType:"TabItem"},(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"While using the ",(0,s.kt)("strong",{parentName:"p"},"legacy")," ",(0,s.kt)("inlineCode",{parentName:"p"},"ERC725Y")," interface, ",(0,s.kt)("inlineCode",{parentName:"p"},"getData(...)")," only takes one data single key: ",(0,s.kt)("inlineCode",{parentName:"p"},"getData(key)"),"."))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"LSP4 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_legacy_minimal_abi.json"',title:'"lsp4_legacy_minimal_abi.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\nconst SAMPLE_ASSET_ADDRESS = "0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78";\nconst LSP4MinimalABI = require("./lsp4_legacy_minimal_abi.json");\n\n/*\n * Check the ERC725Y interface of an asset\n *\n * @param assetAddress of the smart contract\n * @return boolean isERC725YLegacy\n */\n\nasync function checkErc725YInterfaceId(address) {\n  // Create an instance of the asset\n  const asset = new web3.eth.Contract(LSP4MinimalABI, address);\n\n  const erc725YLegacyInterfaceId = "0x2bd57b73";\n  let isERC725YLegacy = false;\n\n  // Check if the contract is a legacy key-value store interface\n  try {\n    isERC725YLegacy = await asset.methods\n      .supportsInterface(erc725YLegacyInterfaceId)\n      .call();\n    return isERC725YLegacy;\n  } catch (error) {\n    console.log("Address could not be checked for ERC725YLegacy interface");\n  }\n  return isERC725YLegacy;\n}\n\n// Debug\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((isLegacy) =>\n  console.log(isLegacy)\n);\n')))),(0,s.kt)("h2",{id:"step-5---receive-the-encoded-asset-data"},"Step 5 - Receive the encoded asset data"),(0,s.kt)("p",null,"Now we can safely retrieve the metadata for the asset address. The ",(0,s.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4")," metadata is saved under the ERC725Y key-value store of the digital asset. We need to input the correct data key to fetch the associated value. There are multiple ",(0,s.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4 keys")," for different properties."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"LSP4TokenName")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"LSP4TokenSymbol")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"LSP4Metadata")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"LSP4Creators[]"))),(0,s.kt)("p",null,"In this guide, we will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP4Metadata")," key to read the asset metadata."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standards",label:"Current Standards",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n// ABIs\nconst LSP4schema = require(\'@erc725/erc725.js/schemas/LSP4DigitalAsset.json\');\n\n// Data keys for asset properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Get the dataset of an asset\n *\n * @param data key of the property to fetch\n * @return string of the encoded data\n */\nasync function getAssetData(key, address) {\n  try {\n\n    // Instantiate the asset\n    const digitalAsset = new web3.eth.Contract(LSP4.abi, address);\n\n    // Get the encoded data\n    return await digitalAsset.methods["getData(bytes32)"](key).call();\n  } catch (error) {\n    return console.error("Data of assets address could not be loaded");\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) =>\n  console.log(encodedData)\n);\n'))),(0,s.kt)(o.Z,{value:"Legacy Standards",label:"Legacy Standards",mdxType:"TabItem"},(0,s.kt)("details",null,(0,s.kt)("summary",null,"ERC725 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_minimal_abi.json"',title:'"erc725_legacy_minimal_abi.json"'},'[\n  {\n    "inputs": [\n      {\n        "internalType": "bytes32",\n        "name": "_keys",\n        "type": "bytes32"\n      }\n    ],\n    "name": "getData",\n    "outputs": [\n      {\n        "internalType": "bytes",\n        "name": "values",\n        "type": "bytes"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n// ABIs\nconst ERC725MinimalABI = require("./erc725_legacy_minimal_abi.json");\nconst LSP4schema = require("@erc725/erc725.js/schemas/LSP4DigitalAsset.json");\n\n// Data keys for asset properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Get the dataset of an asset\n *\n * @param data key of the property to fetch\n * @return string of the encoded data\n */\nasync function getAssetData(key, address) {\n  \n  try {\n\n      // Instanciate asset\n      const digitalAsset = new web3.eth.Contract(\n        ERC725MinimalABI,\n        address\n      );\n\n      // Fetch the encoded data\n      return await digitalAsset.methods.getData(key).call();\n  } catch (error) {\n    return console.log("Data of assets address could not be loaded");\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) =>\n  console.log(encodedData)\n);\n')))),(0,s.kt)("h2",{id:"step-6---decode-the-asset-data"},"Step 6 - Decode the asset data"),(0,s.kt)("p",null,"We can now decode the encoded metadata to fetch readable information. We use\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"decodeData()")," function from the ",(0,s.kt)("a",{parentName:"p",href:"../../tools/erc725js/classes/ERC725#decodedata"},(0,s.kt)("inlineCode",{parentName:"a"},"erc725.js"))," library. We will continue the step before and showcase decoding the ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP4Metadata")," key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n/*\n * Decode the value from ERC725Y storage\n * based on its data key and phrase\n *\n * @param data key of the asset property to fetch\n * @param encodedData as string\n * @return JSON of the decoded data\n */\nasync function decodeAssetData(keyName, encodedData) {\n  try {\n\n    // Instance the asset\n    const digitalAsset = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config\n    );\n\n    // Decode the assets data\n    return digitalAsset.decodeData({\n      keyName: keyName,\n      value: encodedData,\n    });\n  } catch (error) {\n    console.log("Data of an asset could not be decoded");\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) =>\n    console.log(decodedData)\n  );\n});\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4 Digital Asset Metadata")," will resolve in a following JSON structure:"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Show Metadata JSON response"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{\n  key: '0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e',\n  name: 'LSP4Metadata',\n  value: {\n    hashFunction: 'keccak256(utf8)',\n    hash: '0x...',\n    url: 'ipfs:...'\n  }\n}\n"))),(0,s.kt)("h2",{id:"step-7---create-the-storage-link"},"Step 7 - Create the storage link"),(0,s.kt)("p",null,"To fetch the data for the previously decoded metadata, we can access the JSON file and change the URL to access its properties. You may not need this library if you use browser environments like ",(0,s.kt)("inlineCode",{parentName:"p"},"ReactJS")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"VueJS"),"."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Profiles created on the ",(0,s.kt)("a",{parentName:"p",href:"https://universalprofile.cloud/"},"Profile Explorer")," currently use IPFS. Therefore, we will use a static IPFS link for the guide. If there are several storage solutions, you can change them or make distinctions."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n\n/*\n * Create a fetchable storage link that \n * was embeded into the decoded asset data\n *\n * @param decodedAssetMetadata as JSON\n * @return string of asset data URL\n */\nasync function getMetaDataLink(decodedAssetMetadata) {\n  try {\n    // Generate IPFS link from decoded metadata\n    return decodedAssetMetadata.value.url.replace('ipfs://', IPFS_GATEWAY);\n  } catch (error) {\n    console.log(\"URL could not be fetched\");\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => console.log(dataURL));\n  });\n});\n")),(0,s.kt)("h2",{id:"step-8---get-the-asset-data"},"Step 8 - Get the asset data"),(0,s.kt)("p",null,"We can now access the created storage link through a simple URL call and are using ",(0,s.kt)("inlineCode",{parentName:"p"},"isomorphic-fetch")," to read the HTTP response from the asset URL in our ",(0,s.kt)("inlineCode",{parentName:"p"},"node")," environment."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You may not need the ",(0,s.kt)("inlineCode",{parentName:"p"},"isomorphic-fetch")," library if you use browser environments like ",(0,s.kt)("inlineCode",{parentName:"p"},"ReactJS")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"VueJS"),"."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// ...\n\n/*\n * Fetch the asset data from the provided \n * storage link\n *\n * @param dataURL as string\n * @return JSON of asset data\n */\nasync function fetchAssetData(dataURL) {\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log("JSON data of IPFS link could not be fetched");\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => {\n      fetchAssetData(dataURL).then((assetJSON) => console.log(assetJSON));\n    });\n  });\n});\n')),(0,s.kt)("p",null,"For fetching ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP4Metadata"),", the JSON file will have the following structure:"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Show JSON response"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "LSP4Metadata": {\n    "description": "...",\n    "links": [\n      ...\n    ],\n    "images": [\n      [\n        {\n          "width": 1512,\n          "height": 1998,\n          "hashFunction": "keccak256(bytes)",\n          "hash": "0x...",\n          "url": "..."\n        },\n        ...\n      ]\n    ],\n    "assets": [\n      {\n        "hash": "0x...",\n        "hashFunction": "keccak256(bytes)",\n        "fileType": "...",\n        "url": "..."\n      }\n    ]\n  }\n}\n'))),(0,s.kt)("h2",{id:"final-code"},"Final Code"),(0,s.kt)("p",null,"Below is the complete code snippet of this guide, with all the steps compiled together."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"Current Standards",label:"Current Standards",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// Imports\nconst Web3 = require("web3");\nconst { ERC725 } = require("@erc725/erc725.js");\nrequire("isomorphic-fetch");\nconst erc725schema = require("@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json");\nconst LSP4schema = require("@erc725/erc725.js/schemas/LSP4DigitalAsset.json");\nconst LSP8 = require("@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json");\nconst LSP4 = require("@lukso/lsp-smart-contracts/artifacts/LSP4DigitalAssetMetadata.json");\nconst {\n  ERC725Y_INTERFACE_IDS,\n} = require("@erc725/erc725.js/build/main/src/lib/constants");\n\n// Sample addresses\nconst SAMPLE_PROFILE_ADDRESS = "0xa907c1904c22DFd37FF56c1f3c3d795682539196";\nconst SAMPLE_ASSET_ADDRESS = "0x923F49Bac508E4Ec063ac097E00b4a3cAc68a353";\n\n// Network and storage\nconst RPC_ENDPOINT = "https://rpc.l16.lukso.network";\nconst IPFS_GATEWAY = "https://2eff.lukso.dev/ipfs/";\n\n// Parameters for the ERC725 instance\nconst provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);\nconst config = { ipfsGateway: IPFS_GATEWAY };\n\n// Setup Web3\nconst web3 = new Web3("https://rpc.l16.lukso.network");\n\n// Data keys for asset properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Fetch the LSP5 data of the Universal Profile\n * to get its ever received assets\n *\n * @param address of the Universal Profile\n * @return address[] of received assets or custom error\n */\nasync function fetchReceivedAssets(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP5ReceivedAssets[]")\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n/*\n* Fetch the ever issued assets from\n* the Universal Profile\n*\n* @param address of the Universal Profile\n * @return address[] of the issued assets or custom error\n*/\nasync function fetchIssuedAssets(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP12IssuedAssets[]");\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n/*\n * Return an array of assets\n * that are owned by the\n * Universal Profile.\n *\n * @param owner of the Universal Profile\n * @return address[] of owned assets\n */\nasync function fetchOwnedAssets(owner) {\n  const digitalAssets = await fetchReceivedAssets(owner);\n  const ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    const isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n/*\n * Check the ERC725Y interface of an asset\n *\n * @param assetAddress of the smart contract\n * @return boolean isERC725Y\n */\nasync function checkErc725YInterfaceId(assetAddress) {\n  // Create an instance of the asset\n  const asset = new web3.eth.Contract(LSP4.abi, assetAddress);\n\n  let isERC725Y = false;\n\n  // Check if the contract has a key-value store\n  try {\n    isERC725Y = await asset.methods\n      .supportsInterface(ERC725Y_INTERFACE_IDS["3.0"])\n      .call();\n  } catch (error) {\n    console.log("Address could not be checked for ERC725Y interface");\n  }\n\n  return isERC725Y;\n}\n\n/*\n * Get the dataset of an asset\n *\n * @param data key of the property to fetch\n * @return string of the encoded data\n */\nasync function getAssetData(key, address) {\n  try {\n\n    // Instantiate the asset\n    const digitalAsset = new web3.eth.Contract(LSP4.abi, address);\n\n    // Get the encoded data\n    return await digitalAsset.methods["getData(bytes32)"](key).call();\n  } catch (error) {\n    return console.error("Data of assets address could not be loaded");\n  }\n}\n\n /*\n * Decode the value from ERC725Y storage\n * based on its data key and phrase\n *\n * @param data key of the asset property to fetch\n * @param encodedData as string\n * @return JSON of the decoded data\n */\nasync function decodeAssetData(keyName, encodedData) {\n  try {\n    // Instanciate the asset\n    const digitalAsset = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config\n    );\n\n    // Decode the assets data\n    return digitalAsset.decodeData({\n      keyName: keyName,\n      value: encodedData,\n    });\n  } catch (error) {\n    console.log("Data of an asset could not be decoded");\n  }\n}\n\n/*\n * Create a fetchable storage link that\n * was embeded into the decoded asset data\n *\n * @param decodedAssetMetadata as JSON\n * @return string of asset data URL\n */\nasync function getMetaDataLink(decodedAssetMetadata) {\n  try {\n    // Generate IPFS link from decoded metadata\n    return decodedAssetMetadata.value.url.replace(\'ipfs://\', IPFS_GATEWAY);\n  } catch (error) {\n    console.log("URL could not be fetched");\n  }\n}\n\n/*\n * Fetch the asset data from the provided\n * storage link\n *\n * @param dataURL as string\n * @return string with asset data as JSON\n */\nasync function fetchAssetData(dataURL) {\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log("JSON data of IPFS link could not be fetched");\n  }\n}\n\n// Step 1\nfetchReceivedAssets(SAMPLE_PROFILE_ADDRESS).then((profileData) =>\n  console.log(JSON.stringify(profileData, undefined, 2))\n);\n\n// Step 2\nfetchIssuedAssets(SAMPLE_PROFILE_ADDRESS).then((profileData) =>\n  console.log(JSON.stringify(profileData, undefined, 2))\n);\n\n// Step 3\nfetchOwnedAssets(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets)\n);\n\n// Step 4\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((isERC725Y) =>\n  console.log(isERC725Y)\n);\n\n// Step 5\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) =>\n  console.log(encodedData)\n);\n\n// Step 6\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) =>\n    console.log(decodedData)\n  );\n});\n\n// Step 7\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => console.log(dataURL));\n  });\n});\n\n// Step 8\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => {\n      fetchAssetData(dataURL).then((assetJSON) => console.log(assetJSON));\n    });\n  });\n});\n\n\n'))),(0,s.kt)(o.Z,{value:"Legacy Standards",label:"Legacy Standards",mdxType:"TabItem"},(0,s.kt)("details",null,(0,s.kt)("summary",null,"LSP1 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp1_legacy_minimal_abi.json"',title:'"lsp1_legacy_minimal_abi.json"'},'[\n  {\n    "inputs": [],\n    "name": "getAllRawValues",\n    "outputs": [\n      {\n        "internalType": "bytes32[]",\n        "name": "",\n        "type": "bytes32[]"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"ERC725 Legacy Schema"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_minimal_schema.json"',title:'"erc725_legacy_minimal_schema.json"'},'[\n    {\n       "name":"LSP3IssuedAssets[]",\n       "key":"0x3a47ab5bd3a594c3a8995f8fa58d0876c96819ca4516bd76100c92462f2f9dc0",\n       "keyType":"Array",\n       "valueContent":"Address",\n       "valueType":"address"\n    }\n]\n'))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"LSP4 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_legacy_minimal_abi.json"',title:'"lsp4_legacy_minimal_abi.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"ERC725 Legacy ABI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_minimal_abi.json"',title:'"erc725_legacy_minimal_abi.json"'},'[\n  {\n    "inputs": [\n      {\n        "internalType": "bytes32",\n        "name": "_keys",\n        "type": "bytes32"\n      }\n    ],\n    "name": "getData",\n    "outputs": [\n      {\n        "internalType": "bytes",\n        "name": "values",\n        "type": "bytes"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},'\n// Imports\nconst Web3 = require("web3");\nconst { ERC725 } = require("@erc725/erc725.js");\nrequire("isomorphic-fetch");\nconst erc725schema = require("@erc725/erc725.js/schemas/LSP3UniversalProfileMetadata.json");\nconst LSP8 = require("@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json");\nconst LSP4schema = require("@erc725/erc725.js/schemas/LSP4DigitalAsset.json");\n\n// Sample addresses\nconst SAMPLE_ASSET_ADDRESS = "0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78";\nconst SAMPLE_PROFILE_ADDRESS = "0x0C03fBa782b07bCf810DEb3b7f0595024A444F4e";\n\n// Network and storage\nconst RPC_ENDPOINT = "https://rpc.l14.lukso.network";\nconst IPFS_GATEWAY = "https://cloudflare-ipfs.com/ipfs/";\n\n// Legacy ABIs and schemas\nconst LSP1MinimalABI = require("./lsp1_legacy_minimal_abi.json");\nconst LSP4MinimalABI = require("./lsp4_legacy_minimal_abi.json");\nconst ERC725MinimalABI = require("./erc725_legacy_minimal_abi.json");\nconst ERC725LegacySchema = require("./erc725_legacy_minimal_schema.json");\n\n// Parameters for the ERC725 instance\nconst provider = new Web3.providers.HttpProvider(RPC_ENDPOINT);\nconst config = { ipfsGateway: IPFS_GATEWAY };\n\n// Setup Web3\nconst web3 = new Web3("https://rpc.l14.lukso.network");\n\n// Data keys for asset properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Fetch the LSP5 data of the Universal Profile\n * to get its ever received assets\n *\n * @param address of the Universal Profile\n * @return address[] of received assets or custom error\n */\nasync function fetchUniversalReceiverAddress(address) {\n  try {\n    const profile = new ERC725(erc725schema, address, provider, config);\n    const result = await profile.fetchData("LSP1UniversalReceiverDelegate")\n    return result.value;\n  } catch (error) {\n    return console.log("This is not an ERC725 Contract");\n  }\n}\n\n /*\n  * Get all received assets from the\n  * Universal Receiver of the\n  * Universal Profile.\n  *\n  * @param address of the Universal Receiver\n  * @return address[] of the received assets\n  */\nasync function fetchReceivedAssets(receiverAddress) {\n  const universalReceiver = new web3.eth.Contract(\n    LSP1MinimalABI,\n    receiverAddress\n  );\n\n  let rawValues = [];\n\n  try {\n\n    // Fetch all raw values\n    rawValues = await universalReceiver.methods.getAllRawValues().call();\n  } catch (error) {\n    return console.log("Data from universal receiver could not be loaded");\n  }\n\n  const receivedAssets = [];\n\n  // Retrieve addresses\n  for (let i = 0; i < rawValues.length; i++) {\n    receivedAssets[i] = web3.utils.toChecksumAddress(rawValues[i].substr(26));\n  }\n  return receivedAssets;\n}\n\n/*\n * Fetch the ever issued assets from\n * the Universal Profile\n *\n * @param address of the Universal Profile\n * @return address[] of the issued assets or custom error\n */\nasync function fetchIssuedAssets(address) {\n  try {\n    const profile = new ERC725(ERC725LegacySchema, address, provider, config);\n    const result = await profile.getData("LSP3IssuedAssets[]");\n    return result.value;\n  } catch (error) {\n    return console.log("Issued assets could not be fetched");\n  }\n}\n\n/*\n * Return an array of assets\n * that are owned by the\n * Universal Profile.\n *\n * @param owner of the Universal Profile\n * @return address[] of owned assets\n */\nasync function fetchOwnedAssets(owner) {\n  const receiverAddress = await fetchUniversalReceiverAddress(owner);\n  const digitalAssets = await fetchReceivedAssets(receiverAddress);\n  const ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    \n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    const isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n/*\n * Check the ERC725Y interface of an asset\n *\n * @param assetAddress of the smart contract\n * @return boolean isERC725YLegacy\n */\n\nasync function checkErc725YInterfaceId(address) {\n  // Create an instance of the asset\n  const asset = new web3.eth.Contract(LSP4MinimalABI, address);\n\n  const erc725YLegacyInterfaceId = "0x2bd57b73";\n  let isERC725YLegacy = false;\n\n  // Check if the contract is a legacy key-value store interface\n  try {\n    isERC725YLegacy = await asset.methods\n      .supportsInterface(erc725YLegacyInterfaceId)\n      .call();\n    return isERC725YLegacy;\n  } catch (error) {\n    console.log("Address could not be checked for ERC725YLegacy interface");\n  }\n  return isERC725YLegacy;\n}\n\n /*\n * Get the dataset of an asset\n *\n * @param data key of the property to fetch\n * @return string of the encoded data\n */\nasync function getAssetData(key, address) {\n  \n  try {\n\n      // Instanciate asset\n      const digitalAsset = new web3.eth.Contract(\n        ERC725MinimalABI,\n        address\n      );\n\n      // Fetch the encoded data\n      return await digitalAsset.methods.getData(key).call();\n  } catch (error) {\n    return console.log("Data of assets address could not be loaded");\n  }\n}\n\n/*\n * Decode the value from ERC725Y storage\n * based on its data key and phrase\n *\n * @param data key of the asset property to fetch\n * @param encodedData as string\n * @return JSON of the decoded data\n */\nasync function decodeAssetData(keyName, encodedData) {\n  try {\n\n    // Instanciate the asset\n    const digitalAsset = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config\n    );\n\n    // Decode the assets data\n    return digitalAsset.decodeData({\n      keyName: keyName,\n      value: encodedData,\n    });\n  } catch (error) {\n    console.log("Data of an asset could not be decoded");\n  }\n}\n\n/*\n * Create a fetchable storage link that\n * was embeded into the decoded asset data\n *\n * @param decodedAssetMetadata as JSON\n * @return string of asset data URL\n */\nasync function getMetaDataLink(decodedAssetMetadata) {\n  try {\n    // Generate IPFS link from decoded metadata\n    return decodedAssetMetadata.value.url.replace(\'ipfs://\', IPFS_GATEWAY);\n  } catch (error) {\n    console.log("URL could not be fetched");\n  }\n}\n\n /*\n * Fetch the asset data from the provided\n * storage link\n *\n * @param dataURL as string\n * @return string with asset data as JSON\n */\nasync function fetchAssetData(dataURL) {\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log("JSON data of IPFS link could not be fetched");\n  }\n}\n\n// Step 1.1\nfetchUniversalReceiverAddress(SAMPLE_PROFILE_ADDRESS).then((receiverAddress) =>\n  console.log(receiverAddress)\n);\n\n// Step 1.2\nfetchUniversalReceiverAddress(SAMPLE_PROFILE_ADDRESS).then((receiverAddress) => {\n  fetchReceivedAssets(receiverAddress).then((receivedAssets) =>\n    console.log(receivedAssets)\n  );\n});\n\n// Step 2\nfetchIssuedAssets(SAMPLE_PROFILE_ADDRESS).then((issuedAssets) =>\n  console.log(issuedAssets)\n);\n\n// Step 3\nfetchOwnedAssets(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets)\n);\n\n// Step 4\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((isLegacy) =>\n  console.log(isLegacy)\n);\n\n// Step 5\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) =>\n  console.log(encodedData)\n);\n\n// Step 6\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) =>\n    console.log(decodedData)\n  );\n});\n\n// Step 7\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => console.log(dataURL));\n  });\n});\n\n// Step 8\ngetAssetData(MetaDataKey, SAMPLE_ASSET_ADDRESS).then((encodedData) => {\n  decodeAssetData(MetaDataKey, encodedData).then((decodedData) => {\n    getMetaDataLink(decodedData).then((dataURL) => {\n      fetchAssetData(dataURL).then((assetJSON) => console.log(assetJSON));\n    });\n  });\n});\n')))))}p.isMDXComponent=!0},3866:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/example-asset-dd5a54e12a4dd980896dc69d4d2633d7.png"}}]);