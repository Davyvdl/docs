"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7823],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||o;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7462),r=n(7294),o=n(6010),l=n(2389),s=n(7392),i=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n;const{lazy:l,block:d,defaultValue:f,values:m,groupId:h,className:k}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,s.l)(g,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===f?f:null!=(t=null!=f?f:null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)?t:y[0].props.value;if(null!==w&&!g.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:b,setTabGroupChoices:N}=(0,i.U)(),[P,L]=(0,r.useState)(w),U=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=h){const e=b[h];null!=e&&e!==P&&g.some((t=>t.value===e))&&L(e)}const C=e=>{const t=e.currentTarget,n=U.indexOf(t),a=g[n].value;a!==P&&(x(t),L(a),null!=h&&N(h,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=U.indexOf(e.currentTarget)+1;n=null!=(a=U[t])?a:U[0];break}case"ArrowLeft":{var r;const t=U.indexOf(e.currentTarget)-1;n=null!=(r=U[t])?r:U[U.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},k)},g.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:e=>U.push(e),onKeyDown:O,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":P===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(y.filter((e=>e.props.value===P))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==P})))))}function f(e){const t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},7488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));n(5488),n(5162);const o={sidebar_label:"Transfer LYX",sidebar_position:3},l="Transfer LYX",s={unversionedId:"guides/universal-profile/transfer-lyx",id:"guides/universal-profile/transfer-lyx",title:"Transfer LYX",description:"In this tutorial, you will learn how to transfer LYX from your Universal Profile (UP) to any address (including another ).",source:"@site/docs/guides/universal-profile/transfer-lyx.md",sourceDirName:"guides/universal-profile",slug:"/guides/universal-profile/transfer-lyx",permalink:"/guides/universal-profile/transfer-lyx",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-profile/transfer-lyx.md",tags:[],version:"current",lastUpdatedAt:1650994851,formattedLastUpdatedAt:"4/26/2022",sidebarPosition:3,frontMatter:{sidebar_label:"Transfer LYX",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Edit a Universal Profile",permalink:"/guides/universal-profile/edit-profile"},next:{title:"Interact with Contracts",permalink:"/guides/universal-profile/interact-with-contracts"}},i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Step 1 - Get some LYX",id:"step-1---get-some-lyx",level:2},{value:"Step 2 - Create the contracts instances",id:"step-2---create-the-contracts-instances",level:2},{value:"Step 3 - Encode the payload to transfer LYX",id:"step-3---encode-the-payload-to-transfer-lyx",level:2},{value:"Step 4 - Send the payload to the Key Manager",id:"step-4---send-the-payload-to-the-key-manager",level:2},{value:"Final Code",id:"final-code",level:2}],u={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transfer-lyx"},"Transfer LYX"),(0,r.kt)("p",null,"In this tutorial, you will learn ",(0,r.kt)("strong",{parentName:"p"},"how to transfer LYX")," from your Universal Profile (UP) to any ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," (including another \ud83c\udd99 )."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guide - How to send LYX from a Universal Profile",src:n(6173).Z,width:"6901",height:"2318"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"While interacting with a Universal Profile (UP), all interactions should go through the Key Manager (KM). The KM will allow/disallow execution after checking the ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permission-values"},"permissions")," of the calling address."),(0,r.kt)("p",null,"Therefore to interact with our UP, we will need to encode the function call of our UP and pass the ",(0,r.kt)("strong",{parentName:"p"},"payload")," to the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp6-key-manager#execute"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(payload)"))," function on the KM."),(0,r.kt)("p",null,"Transferring LYX from a UP is as simple as making a standard ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permission-values"},(0,r.kt)("inlineCode",{parentName:"a"},"CALL"))," to any ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),", attaching some ",(0,r.kt)("strong",{parentName:"p"},"value")," to the call. You can transfer LYX from a UP via the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp0-erc725-account"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(...)"))," function in the UP contract."),(0,r.kt)("p",null,"The parameters of the function will be as follow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_operation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (for ",(0,r.kt)("inlineCode",{parentName:"li"},"CALL"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_to"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," we want to send LYX to (Externally Owned Account or contract address)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_value"),": the amount of LYX we want to transfer (in Wei)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_data"),": empty payload (",(0,r.kt)("inlineCode",{parentName:"li"},"0x"),").")),(0,r.kt)("p",null,"Since we are just making a simple LYX transfer, the fourth parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"_data")," will be empty."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To complete this mini-guide, we will need two things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ABIs of the ",(0,r.kt)("inlineCode",{parentName:"li"},"UniversalProfile")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"KeyManager")," contracts."),(0,r.kt)("li",{parentName:"ul"},"the address of our Universal Profile we want to send LYX from.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install web3 @lukso/lsp-smart-contracts\n")),(0,r.kt)("h2",{id:"step-1---get-some-lyx"},"Step 1 - Get some LYX"),(0,r.kt)("p",null,"In order to send LYX from our Universal Profile, we will first request some free test LYX for our Universal Profile via the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"http://faucet.l14.lukso.network/"},"L14 Faucet")),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Visit the \u27a1\ufe0f ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"http://faucet.l14.lukso.network/"},"LUKSO L14 Faucet Website")),"."),(0,r.kt)("li",{parentName:"ol"},"Paste the address of your Universal Profile in the input field :arrow","*","down: and click in the ",(0,r.kt)("em",{parentName:"li"},'"request 5 LYX"')," button.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"L14 Faucet screenshot",src:n(3779).Z,width:"500",height:"313"})),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Check the balance of your Universal Profile on the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://blockscout.com/lukso/l14"},"LUKSO L14 Block Explorer"))," \u2b07\ufe0f")),(0,r.kt)("p",null,"You can paste the address of your Universal Profile on the top right corner."),(0,r.kt)("p",null,"If everything went successfully, you should see that the ",(0,r.kt)("em",{parentName:"p"},'"Balance"')," field of your Universal Profile has been updated!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"LUKSO L14 Network Block Explorer (screenshot)",src:n(6537).Z,width:"482",height:"415"})),(0,r.kt)("h2",{id:"step-2---create-the-contracts-instances"},"Step 2 - Create the contracts instances"),(0,r.kt)("p",null,"The first step is to create a contract instance of both our Universal Profile and Key Manager."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"we will first use the Universal Profile to retrieve the ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," of the KeyManager via the ",(0,r.kt)("a",{parentName:"li",href:"/standards/smart-contracts/lsp0-erc725-account#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner()"))," function."),(0,r.kt)("li",{parentName:"ol"},"we will then use the Key Manager to interact with our Universal Profile and send 1 LYX.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const UniversalProfile = require('@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\n\n// the KeyManager is the owner of the Universal Profile\n// so get the address of the KeyManager by calling the owner() function\nconst owner = myUP.methods.owner().call();\n\nconst myKM = new web3.eth.Contract(KeyManager.abi, owner);\n")),(0,r.kt)("h2",{id:"step-3---encode-the-payload-to-transfer-lyx"},"Step 3 - Encode the payload to transfer LYX"),(0,r.kt)("p",null,"The next step is to encode the action that we will perform on our Universal Profile. In our case, we want to transfer 3 LYX to an address using the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)")," function on the UP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3');\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n")),(0,r.kt)("h2",{id:"step-4---send-the-payload-to-the-key-manager"},"Step 4 - Send the payload to the Key Manager"),(0,r.kt)("p",null,"The final step is to pass the encoded LYX transfer function to the Key Manager. Since we are calling from the UP's owner address, the Key Manager will authorize and execute the LYX transfer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await myKM.execute(transferLYXPayload).send({\n  from: wallet.address,\n  gasLimit: 300_000,\n});\n")),(0,r.kt)("h2",{id:"final-code"},"Final Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Web3 = require('web3');\nconst UniversalProfile = require('@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\n// 1. instantiate your contracts\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\n\n// the KeyManager is the owner of the Universal Profile\n// so get the address of the KeyManager by calling the owner() function\nconst owner = myUP.methods.owner().call();\n\nconst myKM = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3');\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// 2. encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n\n// 3. execute the LYX transfer via the Key Manager\nawait myKM.execute(transferLYXPayload).send({\n  from: wallet.address,\n  gasLimit: 300_00,\n});\n")))}p.isMDXComponent=!0},3779:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/L14-faucet-d97230cc99f1c1d4e2ff8b6d10857f93.png"},6173:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/guide-LYX-transfer-1a56d65249f7fdc352da689946bc6569.jpeg"},6537:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/l14-explorer-cdcdf07e35e4f98915d18601c8187634.png"}}]);