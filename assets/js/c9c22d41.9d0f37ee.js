"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[8709],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,v=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(v,o(o({ref:t},d),{},{components:n})):r.createElement(v,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8086:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"LSP1 - Universal Receiver",sidebar_position:3.2},c="LSP1 - Universal Receiver",l={unversionedId:"standards/generic-standards/lsp1-universal-receiver",id:"standards/generic-standards/lsp1-universal-receiver",title:"LSP1 - Universal Receiver",description:"LSP1 - Universal Receiver",source:"@site/docs/standards/generic-standards/02-lsp1-universal-receiver.md",sourceDirName:"standards/generic-standards",slug:"/standards/generic-standards/lsp1-universal-receiver",permalink:"/standards/generic-standards/lsp1-universal-receiver",editUrl:"https://github.com/lukso-network/docs/tree/main/docs/standards/generic-standards/02-lsp1-universal-receiver.md",tags:[],version:"current",sidebarPosition:3.2,frontMatter:{sidebar_label:"LSP1 - Universal Receiver",sidebar_position:3.2},sidebar:"standardsSidebar",previous:{title:"Introduction",permalink:"/standards/introduction"},next:{title:"LSP2 - ERC725Y JSON Schema",permalink:"/standards/generic-standards/lsp2-json-schema"}},d=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"What does this standard represent ?",id:"what-does-this-standard-represent-",children:[{value:"Specification",id:"specification",children:[],level:3}],level:2},{value:"Extension",id:"extension",children:[],level:2},{value:"References",id:"references",children:[],level:2}],p={toc:d};function u(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lsp1---universal-receiver"},"LSP1 - Universal Receiver"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Standard Document")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-1-UniversalReceiver.md"},"LSP1 - Universal Receiver")))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"There is often the need to ",(0,i.kt)("strong",{parentName:"p"},"inform other smart contracts")," about the transactions they might receive. A good example would be token transfers, if a smart contract receives a token there is no way that it knows about the transfer in a generic way. This problem limitate the autonomy of the smart contracts and require a third party to evoke."),(0,i.kt)("p",null,"This problem can be solved by creating a standard ",(0,i.kt)("strong",{parentName:"p"},"universal function")," that all smart contracts implement so wallets or profiles could use to notify the user about an incoming asset, information, followers, etc ..."),(0,i.kt)("h2",{id:"what-does-this-standard-represent-"},"What does this standard represent ?"),(0,i.kt)("h3",{id:"specification"},"Specification"),(0,i.kt)("p",null,"This standard represents a single function named ",(0,i.kt)("strong",{parentName:"p"},"universalReceiver")," that could receive ",(0,i.kt)("strong",{parentName:"p"},"any arbitrary information")," and it takes two parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"bytes32 ",(0,i.kt)("inlineCode",{parentName:"li"},"typeId")," : Hash or Hook of a specific standard."),(0,i.kt)("li",{parentName:"ul"},"bytes ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," : Any arbitrary data.")),(0,i.kt)("p",null,"Receiving contracts should take the ",(0,i.kt)("strong",{parentName:"p"},"typeId")," into consideration to properly ",(0,i.kt)("strong",{parentName:"p"},"decode the data"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"universalReceiver")," function emits an event with the data passed to it along with some additional data. It could be customized to ",(0,i.kt)("strong",{parentName:"p"},"revert on calls"),", this way the smart contract implementing it won't be able to receive ",(0,i.kt)("strong",{parentName:"p"},"assets"),", ",(0,i.kt)("strong",{parentName:"p"},"information"),", etc .."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"schema of universal receiver transaction",src:n(4456).Z})),(0,i.kt)("p",null,"Smart contracts that are willing to implement this function are well advised ",(0,i.kt)("strong",{parentName:"p"},"to register")," the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/standards/smart-contracts/interface-ids"},"LSP1UniversalReceiver InterfaceId"))," ",(0,i.kt)("strong",{parentName:"p"},"using ERC165")," to let other contracts know that they support this standard."),(0,i.kt)("h2",{id:"extension"},"Extension"),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"optional extension")," to this standard is proposed to let contracts not just be notified on the incoming and outcoming transactions but to delegate their response to an external upgradeable contract that could ",(0,i.kt)("strong",{parentName:"p"},"handle and react to certain calls")," with custom logic."),(0,i.kt)("p",null,"This is possible through setting the address of the ",(0,i.kt)("strong",{parentName:"p"},"external contract")," as value for the ",(0,i.kt)("strong",{parentName:"p"},"LSP1UniversalReceiver key")," below, in the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/ERC725Alliance/erc725/blob/main/docs/ERC-725.md#erc725y"},"ERC725Y key value store"))," of the contract implementing the ",(0,i.kt)("strong",{parentName:"p"},"universalReceiver")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "LSP1UniversalReceiverDelegate",\n  "key": "0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47",\n  "keyType": "Singleton",\n  "valueType": "address",\n  "valueContent": "Address"\n}\n')),(0,i.kt)("p",null,"Check ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp1-universal-receiver-delegate"},"LSP1-UniversalReceiverDelegate"))," standard for more info."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-1-UniversalReceiver.md"},"LUKSO Standards Proposals: LSP1 - Universal Receiver (Standard Specification, GitHub)"))))}u.isMDXComponent=!0},4456:function(e,t,n){t.Z=n.p+"assets/images/ur-transaction-f1f96eafdc6b9b2c184b50853224d616.jpg"}}]);