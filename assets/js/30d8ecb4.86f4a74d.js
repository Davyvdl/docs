"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[4097],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>P});var a=n(7462),r=n(7294),s=n(6010),o=n(2466),l=n(6775),i=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[i,c]=f({queryString:n,groupId:a}),[d,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),h=(()=>{const e=i??d;return m({value:e,tabValues:s})?e:null})();(0,r.useEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),k(e)}),[c,k,s]),tabValues:s}}var h=n(2389);const b="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==l&&(d(t),i(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,s.Z)("tabs__item",y,null==o?void 0:o.className,{"tabs__item--active":l===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:a}=e;if(t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=k(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",b)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(g,(0,a.Z)({},e,t)))}function P(e){const t=(0,h.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},7742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),s=n(4866),o=n(5162);const l={sidebar_label:"Transfer an LSP7 Digital Asset (Token)",sidebar_position:3},i="Create an LSP7 Digital Asset (Token)",c={unversionedId:"guides/digital-assets/transfer-lsp7-digital-asset",id:"guides/digital-assets/transfer-lsp7-digital-asset",title:"Create an LSP7 Digital Asset (Token)",description:"This guide will teach you how to tranfer an existing (LSP7 Digital Asset) from a Universal Profile controlled by a Key Manager to another Universal Profile.",source:"@site/docs/guides/digital-assets/transfer-lsp7-digital-asset.md",sourceDirName:"guides/digital-assets",slug:"/guides/digital-assets/transfer-lsp7-digital-asset",permalink:"/guides/digital-assets/transfer-lsp7-digital-asset",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/digital-assets/transfer-lsp7-digital-asset.md",tags:[],version:"current",lastUpdatedAt:1676652076,formattedLastUpdatedAt:"Feb 17, 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Transfer an LSP7 Digital Asset (Token)",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Mint an LSP7 Digital Asset (Token)",permalink:"/guides/digital-assets/mint-lsp7-digital-asset"},next:{title:"Read Asset Data",permalink:"/guides/digital-assets/read-asset-data"}},u={},d=[{value:"Transfer tokens to an other Universal Profile",id:"transfer-tokens-to-an-other-universal-profile",level:2},{value:"Step 1 - Setup imports and constants",id:"step-1---setup-imports-and-constants",level:3},{value:"Step 2 - Instantiate contracts",id:"step-2---instantiate-contracts",level:3},{value:"Step 3 - Setup the calldatas",id:"step-3---setup-the-calldatas",level:3},{value:"Step 4 - Send transaction",id:"step-4---send-transaction",level:3},{value:"Final code",id:"final-code",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-an-lsp7-digital-asset-token"},"Create an LSP7 Digital Asset (Token)"),(0,r.kt)("p",null,"This guide will teach you how to tranfer an existing (",(0,r.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/lsp7-digital-asset"},"LSP7 Digital Asset"),") from a ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},(0,r.kt)("strong",{parentName:"a"},"Universal Profile"))," controlled by a ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},(0,r.kt)("strong",{parentName:"a"},"Key Manager"))," to another Universal Profile."),(0,r.kt)("h2",{id:"transfer-tokens-to-an-other-universal-profile"},"Transfer tokens to an other Universal Profile"),(0,r.kt)("p",null,"The following code snippet shows how to transfer 15 tokens from your Universal Profile to another Universal Profile."),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can use either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},"You MUST install ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h3",{id:"step-1---setup-imports-and-constants"},"Step 1 - Setup imports and constants"),(0,r.kt)("p",null,"At this point you will need a private key in order to transfer some tokens as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable")," ",(0,r.kt)("em",{parentName:"p"},"token contract address")," and the ",(0,r.kt)("em",{parentName:"p"},"address of the Universal Profile")," that has some tokens.\nWe will import ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniversalProfile"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyManager")," in order to get the ",(0,r.kt)("em",{parentName:"p"},"ABIs")," of the contracts that we will interact with."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// setup your EOA\nconst account = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// setup your EOA\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h3",{id:"step-2---instantiate-contracts"},"Step 2 - Instantiate contracts"),(0,r.kt)("p",null,"At this point, the ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniversalProfile"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyManager")," contracts are being prepared for the following interactions. Construct an instance of a contract, using ",(0,r.kt)("em",{parentName:"p"},"contract ABI")," and ",(0,r.kt)("em",{parentName:"p"},"contract address"),"."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const myUniversalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  myUniversalProfileAddress,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst myToken = new web3.eth.Contract(LSP7Mintable.abi, myTokenAddress);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const myUniversalProfile = new ethers.Contract(\n  myUniversalProfileAddress,\n  UniversalProfile.abi,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new ethers.Contract(owner, KeyManager.abi);\n\nconst myToken = new ethers.Contract(myTokenAddress, LSP7Mintable.abi);\n")))),(0,r.kt)("h3",{id:"step-3---setup-the-calldatas"},"Step 3 - Setup the calldatas"),(0,r.kt)("p",null,"Now we need to prepare the calldatas that we will use in order to transfer tokens from a Universal Profile to another. First calldata is a token tarnsfer. Second calldata is an interaction of the Universal Profile with the Token contract."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 1. generate the calldata to transfer tokens\nconst tokenCalldata = myToken.methods\n  .transfer(myUniversalProfileAddress, '<receiver-up-address>', 15, false, '0x')\n  .encodeABI();\n\n// 2. generate calldata for Universal Profile to execute the token transfer on the token contract\nconst upCalldata = myUniversalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX sent\n  tokenCalldata,\n).encodeABI();\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 1. generate the calldata to transfer tokens\nconst tokenCalldata = myToken.interface.encodeFunctionData('transfer', [\n  myUniversalProfileAddress,\n  '<receiver-up-address>',\n  15,\n  false,\n  '0x',\n]);\n\n// 2. generate calldata for Universal Profile to execute the token transfer on the token contract\nconst upCalldata = myUniversalProfile.interface.encodeFunctionData('execute', [\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX sent\n  tokenCalldata,\n]);\n")))),(0,r.kt)("h3",{id:"step-4---send-transaction"},"Step 4 - Send transaction"),(0,r.kt)("p",null,"Finally we send the transaction and transfer the tokens from a Universal Profile to another."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 3. execute via the KeyManager\nawait myKeyManager.methods['execute(bytes)'](upCalldata).send({\n  from: myEOA,\n  gas: 5_000_000,\n  gasPrice: '1000000000',\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 3. execute via the KeyManager\nawait myKeyManager.connect(myEOA)['execute(bytes)'](upCalldata);\n")))),(0,r.kt)("h3",{id:"final-code"},"Final code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// setup your EOA\nconst account = web3.eth.accounts.wallet.add(privateKey);\n\nconst myUniversalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  myUniversalProfileAddress,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst myToken = new web3.eth.Contract(LSP7Mintable.abi, myTokenAddress);\n\n// 1. generate the calldata to transfer tokens\nconst tokenCalldata = myToken.methods\n  .transfer(myUniversalProfileAddress, '<receiver-up-address>', 15, false, '0x')\n  .encodeABI();\n\n// 2. generate calldata for Universal Profile to execute the token transfer on the token contract\nconst upCalldata = myUniversalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX sent\n  tokenCalldata,\n).encodeABI();\n\n// 3. execute via the KeyManager\nawait myKeyManager.methods['execute(bytes)'](upCalldata).send({\n  from: myEOA,\n  gas: 5_000_000,\n  gasPrice: '1000000000',\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// setup your EOA\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst myUniversalProfile = new ethers.Contract(\n  myUniversalProfileAddress,\n  UniversalProfile.abi,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new ethers.Contract(owner, KeyManager.abi);\n\nconst myToken = new ethers.Contract(myTokenAddress, LSP7Mintable.abi);\n\n// 1. generate the calldata to transfer tokens\nconst tokenCalldata = myToken.interface.encodeFunctionData('transfer', [\n  myUniversalProfileAddress,\n  '<receiver-up-address>',\n  15,\n  false,\n  '0x',\n]);\n\n// 2. generate calldata for Universal Profile to execute the token transfer on the token contract\nconst upCalldata = myUniversalProfile.interface.encodeFunctionData('execute', [\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX sent\n  tokenCalldata,\n]);\n\n// 3. execute via the KeyManager\nawait myKeyManager.connect(myEOA)['execute(bytes)'](upCalldata);\n")))))}m.isMDXComponent=!0}}]);