"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7686],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4404:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_label:"Edit Vault Data",sidebar_position:2},o="Edit Vault Data",i={unversionedId:"guides/vault/edit-vault-data",id:"guides/vault/edit-vault-data",title:"Edit Vault Data",description:"This guide will teach you how to set data to an LSP9Vault contract. Any data can be attached to the vault, and since it supports the LSP1-UniversalReceiver standard, we will set the Universal Receiver Delegate address inside the storage.",source:"@site/docs/guides/vault/edit-vault-data.md",sourceDirName:"guides/vault",slug:"/guides/vault/edit-vault-data",permalink:"/guides/vault/edit-vault-data",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/edit-vault-data.md",tags:[],version:"current",lastUpdatedAt:1660132097,formattedLastUpdatedAt:"Aug 10, 2022",sidebarPosition:2,frontMatter:{sidebar_label:"Edit Vault Data",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Create a Vault",permalink:"/guides/vault/create-a-vault"},next:{title:"Interact With Contracts",permalink:"/guides/vault/interact-with-contracts"}},l={},d=[{value:"Setting Data (Universal Receiver Delegate)",id:"setting-data-universal-receiver-delegate",level:2},{value:"Deploying Universal Receiver Delegate (URD)",id:"deploying-universal-receiver-delegate-urd",level:3},{value:"Setting the URD address in the storage",id:"setting-the-urd-address-in-the-storage",level:3},{value:"Reading Data",id:"reading-data",level:2}],c={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"edit-vault-data"},"Edit Vault Data"),(0,r.kt)("p",null,"This guide will teach you how to set data to an ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/smart-contracts/lsp9-vault"},"LSP9Vault"))," contract. Any data can be attached to the vault, and since it supports the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/generic-standards/lsp1-universal-receiver"},"LSP1-UniversalReceiver"))," standard, we will set the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp1-universal-receiver-delegate-vault"},(0,r.kt)("strong",{parentName:"a"},"Universal Receiver Delegate"))," address inside the storage."),(0,r.kt)("h2",{id:"setting-data-universal-receiver-delegate"},"Setting Data (Universal Receiver Delegate)"),(0,r.kt)("p",null,"The default implementation of the ",(0,r.kt)("strong",{parentName:"p"},"Universal Receiver Delegate")," of the Vault that we will deploy will register the assets received to the storage and and will remove them when their balance equals 0."),(0,r.kt)("h3",{id:"deploying-universal-receiver-delegate-urd"},"Deploying Universal Receiver Delegate (URD)"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Universal Profile")," and the ",(0,r.kt)("strong",{parentName:"p"},"Vault")," don't use the same implementation of the Universal Receiver Delegate.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploying the Universal Receiver Delegate of the vault"',title:'"Deploying',the:!0,Universal:!0,Receiver:!0,Delegate:!0,of:!0,'vault"':!0},"import Web3 from 'web3';\nimport LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key\nconst myEOA = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);\n\n// create an instance\nconst myURDVault = new web3.eth.Contract(LSP1UniversalReceiverDelegateVault.abi);\n\n// deploy the universal receiver delegate Vault contract\nawait myURDVault\n  .deploy({\n    data: LSP1UniversalReceiverDelegateVault.bytecode\n  })\n  .send({\n    from: myEOA.address,\n    gas: 5_000_000,\n    gasPrice: '1000000000',\n  });\n")),(0,r.kt)("h3",{id:"setting-the-urd-address-in-the-storage"},"Setting the URD address in the storage"),(0,r.kt)("p",null,"The Vault's owner could be an ",(0,r.kt)("strong",{parentName:"p"},"EOA"),", or any ",(0,r.kt)("strong",{parentName:"p"},"other smart contract"),". In our case, we will suppose that the Vault's owner is a ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/introduction"},"Universal Profile")," that is controlled by a Key Manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setting the URD address in the storage"',title:'"Setting',the:!0,URD:!0,address:!0,in:!0,'storage"':!0},"import Web3 from 'web3';\nimport constants from \"@lukso/lsp-smart-contracts/constants.js\";\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key\nconst myEOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n\nconst URD_DATA_KEY = constants.ERC725YKeys.LSP0.LSP1UniversalReceiverDelegate;\nconst myUniversalProfileAddress = \"0x..\" // address of the UP\nconst myVaultAddress = \"0x..\" // address of the Vault\nconst myURDAddress = \"0x..\" // address of the URD of the Vault \n\n// create an instance of the Vault\nconst myVault = new web3.eth.Contract(LSP9Vault.abi, myVaultAddress);\n\n// create an instance of the UP\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUniversalProfileAddress);\n\n// encode setData Payload on the Vault\nconst setDataPayload = await myLSP9Vault.methods[\n    \"setData(bytes32,bytes)\"\n  ](URD_DATA_KEY, myURDAddress).encodeABI();  // Any other information can be stored here\n\n// encode execute Payload on the UP\nconst executePayload = await myUP.methods.execute(\n    0, // OPERATION CALL\n    myVaultAddress,\n    0, // value to transfer\n    setDataPayload\n    )\n    .encodeABI();\n\n// getting the Key Manager address from UP\nconst myKeyManagerAddress = await myUP.methods.owner().call();\n\n// create an instance of the KeyManager\nlet myKM = new web3.eth.Contract(LSP6KeyManager.abi, myKeyManagerAddress);\n\n// execute the executePayload on the KM\nawait myKM.methods.execute(executePayload).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n});\n")),(0,r.kt)("h2",{id:"reading-data"},"Reading Data"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"LSP9Vault")," contract is an ",(0,r.kt)("strong",{parentName:"p"},"ERC725")," contract, so it shares the same way to read data as Universal Profiles and other ERC725 contracts by using ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/tools/erc725js/getting-started"},"erc725.js")),"."),(0,r.kt)("p",null,"You can refer to this ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/universal-profile/read-profile-data"},"previous guide"))," to learn how to ",(0,r.kt)("strong",{parentName:"p"},"fetch data")," (received assets, issued assets, etc ..). Please note, that you will need to replace the address of the ",(0,r.kt)("strong",{parentName:"p"},"Universal Profile")," with the ",(0,r.kt)("strong",{parentName:"p"},"Vault's")," address."))}u.isMDXComponent=!0}}]);