"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[2014],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>p});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),l=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},u=function(t){var e=l(t.components);return a.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),h=l(n),p=r,m=h["".concat(s,".").concat(p)]||h[p]||d[p]||o;return n?a.createElement(m,c(c({ref:e},u),{},{components:n})):a.createElement(m,c({ref:e},u))}));function p(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,c=new Array(o);c[0]=h;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4521:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(3117),r=(n(7294),n(3905));const o={sidebar_label:"Interact With Contracts",sidebar_position:3},c="Interact With Contracts",i={unversionedId:"guides/vault/interact-with-contracts",id:"guides/vault/interact-with-contracts",title:"Interact With Contracts",description:"Similar to our previous guide on setting data on the Vault, in this guide, we will be learning how to interact with other contracts through the Vault's execute function.",source:"@site/docs/guides/vault/interact-with-contracts.md",sourceDirName:"guides/vault",slug:"/guides/vault/interact-with-contracts",permalink:"/guides/vault/interact-with-contracts",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/interact-with-contracts.md",tags:[],version:"current",lastUpdatedAt:1660029707,formattedLastUpdatedAt:"Aug 9, 2022",sidebarPosition:3,frontMatter:{sidebar_label:"Interact With Contracts",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Edit Vault Data",permalink:"/guides/vault/edit-vault-data"},next:{title:"Restrict Addresses to Vaults",permalink:"/guides/vault/restrict-addresses-to-vaults"}},s={},l=[{value:"Interact with contracts",id:"interact-with-contracts-1",level:2}],u={toc:l};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-contracts"},"Interact With Contracts"),(0,r.kt)("p",null,"Similar to our ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/vault/edit-vault-data"},"previous guide"))," on setting data on the Vault, in this guide, we will be learning how to ",(0,r.kt)("strong",{parentName:"p"},"interact with other contracts")," through the Vault's execute function."),(0,r.kt)("h2",{id:"interact-with-contracts-1"},"Interact with contracts"),(0,r.kt)("p",null,"Check the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/vault/edit-vault-data"},"edit Vault data guide"))," to know how to get the needed variables (myVault, myUP, myVaultAddress)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Interacting with other contracts through the vault"',title:'"Interacting',with:!0,other:!0,contracts:!0,through:!0,the:!0,'vault"':!0},"import Web3 from 'web3';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key\nconst myEOA = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);\n\nconst myUniversalProfileAddress = \"0x..\" // address of the UP\nconst myVaultAddress = \"0x..\" // address of the Vault\n\n// create an instance of the Vault\nconst myVault = new web3.eth.Contract(LSP9Vault.abi, myVaultAddress);\n\n// create an instance of the UP\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUniversalProfileAddress);\n\n// encode the payload of the function we want to call \n// could be a transfer function of a token, function on a Decentralized exchange, etc.\nconst targetPayload = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n\n// encode executing the targetPayload on the Vault\nconst executePayloadVault = await myVault.methods.execute(\n    0, // OPERATION CALL\n    targetContract.address, // address of the contract we want to interact with\n    0, // value to transfer\n    targetPayload\n    )\n    .encodeABI();\n\n// encode executing the executePayloadVault on the UP\nconst executePayloadUP = await myUP.methods.execute(\n    0, // OPERATION CALL\n    myVaultAddress,\n    0, // value to transfer\n    executePayloadVault\n    )\n    .encodeABI();\n\n// getting the Key Manager address from UP\nconst myKeyManagerAddress = await myUP.methods.owner().call()\n\n// create an instance of the KeyManager\nconst myKM = new web3.eth.Contract(LSP6KeyManager.abi, myKeyManagerAddress);\n\n// executing the executePayloadUP on the KM\nawait myKM.methods.execute(executePayloadUP).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n    });\n")),(0,r.kt)("p",null,"In the code snippet above, we interacted with ",(0,r.kt)("inlineCode",{parentName:"p"},"myCoolfunction(..)")," function on the ",(0,r.kt)("strong",{parentName:"p"},"targetContract")," contract through the Vault's ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp9-vault#execute"},"execute")," function. The call was encoded and executed through the Universal Profile and the Key Manager."))}d.isMDXComponent=!0}}]);