"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[8188],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),f=s,h=p["".concat(c,".").concat(f)]||p[f]||u[f]||r;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return s}});var a=t(7294);function s(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7462),s=t(7294),r=t(2389),o=t(5979),i=t(6010),c="tabItem_LplD";function l(e){var n,t,r,l=e.lazy,d=e.block,u=e.defaultValue,p=e.values,f=e.groupId,h=e.className,m=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=p?p:m.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,o.lx)(g,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===u?u:null!=(n=null!=u?u:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=m[0])?void 0:r.props.value;if(null!==y&&!g.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=(0,o.UB)(),b=S.tabGroupChoices,v=S.setTabGroupChoices,w=(0,s.useState)(y),A=w[0],C=w[1],D=[],N=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var L=b[f];null!=L&&L!==A&&g.some((function(e){return e.value===L}))&&C(L)}var E=function(e){var n=e.currentTarget,t=D.indexOf(n),a=g[t].value;a!==A&&(N(n),C(a),null!=f&&v(f,a))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=D.indexOf(e.currentTarget)+1;t=D[a]||D[0];break;case"ArrowLeft":var s=D.indexOf(e.currentTarget)-1;t=D[s]||D[D.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},h)},g.map((function(e){var n=e.value,t=e.label,r=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===n?0:-1,"aria-selected":A===n,key:n,ref:function(e){return D.push(e)},onKeyDown:P,onFocus:E,onClick:E},r,{className:(0,i.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":A===n})}),null!=t?t:n)}))),l?(0,s.cloneElement)(m.filter((function(e){return e.props.value===A}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==A})}))))}function d(e){var n=(0,r.Z)();return s.createElement(l,(0,a.Z)({key:String(n)},e))}},9271:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return f}});var a=t(7462),s=t(3366),r=(t(7294),t(3905)),o=t(9877),i=t(8215),c=["components"],l={sidebar_label:"Read Asset Data",sidebar_position:2},d="Read Asset Data",u={unversionedId:"guides/fetch-data/read-asset-data",id:"guides/fetch-data/read-asset-data",title:"Read Asset Data",description:"In this guide, we will learn how to:",source:"@site/docs/guides/fetch-data/read-asset-data.md",sourceDirName:"guides/fetch-data",slug:"/guides/fetch-data/read-asset-data",permalink:"/guides/fetch-data/read-asset-data",editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/fetch-data/read-asset-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Read Asset Data",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Read Profile Data",permalink:"/guides/fetch-data/read-profile-data"},next:{title:"Create an LSP7 Digital Asset (Token)",permalink:"/guides/assets/create-lsp7-digital-asset"}},p={},f=[{value:"Setup",id:"setup",level:2},{value:"Step 1 - Get all assets ever received",id:"step-1---get-all-assets-ever-received",level:2},{value:"Step 2 - Check ownership of assets",id:"step-2---check-ownership-of-assets",level:2},{value:"Step 3 - Check the type of an asset",id:"step-3---check-the-type-of-an-asset",level:2},{value:"Step 4 - Receive the encoded asset data",id:"step-4---receive-the-encoded-asset-data",level:2},{value:"Step 5 - Decode the asset data",id:"step-5---decode-the-asset-data",level:2},{value:"Step 6 - Create the storage link",id:"step-6---create-the-storage-link",level:2},{value:"Step 7 - Get the asset data",id:"step-7---get-the-asset-data",level:2},{value:"Step 8 - Fetch the asset&#39;s properties",id:"step-8---fetch-the-assets-properties",level:2},{value:"Final Code",id:"final-code",level:2}],h={toc:f};function m(e){var n=e.components,l=(0,s.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},h,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"read-asset-data"},"Read Asset Data"),(0,r.kt)("p",null,"In this guide, we will learn how to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"read data from the ",(0,r.kt)("a",{parentName:"li",href:"/standards/generic-standards/lsp1-universal-receiver"},"Universal Receiver"),"."),(0,r.kt)("li",{parentName:"ul"},"get all assets ever received by a profile."),(0,r.kt)("li",{parentName:"ul"},"fetch the data of all owned assets.")),(0,r.kt)("div",{style:{textAlign:"center",color:"grey"}},(0,r.kt)("img",{src:t(3866).Z,alt:"Asset example on universalprofile.cloud"}),(0,r.kt)("br",null),(0,r.kt)("i",null,"The ",(0,r.kt)("a",{href:"https://universalprofile.cloud/asset/0xbD14F48DDDe851b812D95431906E629fb9514Db4"},"Lambada Dyed Red White Blue")," asset as seen on UniversalProfile.cloud")),(0,r.kt)("p",null,"We will use:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/v1.7.0/"},"web3.js")," for utility as well as connecting to the LUKSO L14 network."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../tools/erc725js/getting-started/"},"erc725.js")," library to check the interface of a profile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/matthew-andrews/isomorphic-fetch"},"isomorphic-fetch")," to enable you to use ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," in Node.js code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts"},"lsp-smart-contracts")," to integrate the ABIs for the LUKSO Standards.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Open a terminal in the project's folder of your choice and install all required libraries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install web3 @erc725/erc725.js isomorphic-fetch @lukso/lsp-smart-contracts\n")),(0,r.kt)("h2",{id:"step-1---get-all-assets-ever-received"},"Step 1 - Get all assets ever received"),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"./read-profile-data"},"previous guide"),", we learned how to read the Universal Profile properties and retrieve the address of its Universal Receiver."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/lsp-smart-contracts/tree/develop/contracts/LSP1UniversalReceiver"},"Universal Receiver is a smart contract")," that keeps track of all the assets ever received by a Universal Profile. We use sample addresses for the Universal Receiver, Universal Profile, and Identifiable Digital Asset to make the guide more understandable."),(0,r.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Recommendation")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},'Complete "ready to use" JSON and JS files are available at the end in the ',(0,r.kt)("a",{parentName:"p",href:"#final-code"},(0,r.kt)("strong",{parentName:"a"},"Final Code"))," section."))),(0,r.kt)("p",null,"To make the guide more understandable, we use sample addresses for the Universal Receiver, Universal Profile and Identifiable Digital Asset. You will most likely change these static variables with a dynamic values from your app's input field or fetching processes."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP1 Minimal JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp1_minimal_interface.json"',title:'"lsp1_minimal_interface.json"'},'[\n  {\n    "inputs": [],\n    "name": "getAllRawValues",\n    "outputs": [\n      {\n        "internalType": "bytes32[]",\n        "name": "",\n        "type": "bytes32[]"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// Import and Setup\nconst Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\n// Our static Universal Receiver address\nconst SAMPLE_UNIVERSAL_RECEIVER = '0x50a02ef693ff6961a7f9178d1e53cc8bbe1dad68';\n\n// ABI for the Universal Receiver\nconst LSP1MinimalInterface = require('./lsp1_minimal_interface.json');\n/*\n * Return array of blockchain addresses of\n * assets, that were received by the\n * Univeral Profile holder.\n *\n * @return address[] of assets\n */\nasync function getAssetAddressses() {\n  const AddressStore = new web3.eth.Contract(\n    LSP1MinimalInterface,\n    SAMPLE_UNIVERSAL_RECEIVER,\n  );\n\n  let rawValues = [];\n\n  try {\n    // Fetch all raw values\n    rawValues = await AddressStore.methods.getAllRawValues().call();\n  } catch (error) {\n    return console.log('Data from universal receiver could not be loaded');\n  }\n\n  let digitalAssets = [];\n\n  // Retrieve addresses\n  for (let i = 0; i < rawValues.length; i++) {\n    digitalAssets[i] = web3.utils.toChecksumAddress(rawValues[i].substr(26));\n  }\n  return digitalAssets;\n}\n\n// Debug\ngetAssetAddressses().then((digitalAssets) => console.log(digitalAssets));\n")),(0,r.kt)("h2",{id:"step-2---check-ownership-of-assets"},"Step 2 - Check ownership of assets"),(0,r.kt)("p",null,"After trimming out the asset addresses, we can check which assets are owned by the Universal Profile. We can do this by comparing the balances of the assets within the receiver contract. If the balance is greater than zero, the asset is still owned by the address."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Difference between Token Ownership")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("a",{parentName:"li",href:"/standards/nft-2.0/LSP7-Digital-Asset"},"LSP7"),", you will get back the amount of tokens you own."),(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("a",{parentName:"li",href:"/standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8"),", you will get back the number of NFTs you own (without knowing which specific tokenId you own).")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n\n// ABI for the asset\nconst LSP8 = require('@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json');\n\n// Our static Universal Profile address\nconst SAMPLE_PROFILE_ADDRESS = '0x0C03fBa782b07bCf810DEb3b7f0595024A444F4e';\n\n/*\n * Return array of blockchain addresses\n * of assets that are owned by the\n * Univeral Profile.\n *\n * @param owner Universal Profile address\n * @return address[] of owned assets\n */\nasync function getOwnedAddresses(owner) {\n  let digitalAssets = await getAssetAddressses();\n  let ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    let isCurrentOwner;\n\n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n// Debug\ngetOwnedAddresses(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets),\n);\n")),(0,r.kt)("h2",{id:"step-3---check-the-type-of-an-asset"},"Step 3 - Check the type of an asset"),(0,r.kt)("p",null,"Now that we have retrieved all the owned assets, we need to check which interface is behind these smart contract addresses, to get the data."),(0,r.kt)("p",null,"UniversalProfile contracts on the ",(0,r.kt)("a",{parentName:"p",href:"https://universalprofile.cloud/"},"profile explorer")," on the LUKSO L14 test network have been deployed using different ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC725Y")," interfaces. We have to know which interface to use, to assure the right interaction and bypass errors."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Current Standads",label:"Current Standards",mdxType:"TabItem"},(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC725Y")," interface function ",(0,r.kt)("inlineCode",{parentName:"p"},"getData(...)")," accepts an array of keys: ",(0,r.kt)("inlineCode",{parentName:"p"},"getData(keys[])")," to fetch multiple values at once."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="asset_interface.json"',title:'"asset_interface.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\nconst SAMPLE_ASSET_ADDRESS = '0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78';\n\nconst AssetInterface = require('./asset_interface.json');\n\n/*\n * Check the interface of an asset's smart contract\n *\n * @param address of asset\n * @return boolean - if the address supports ERC725Y or false if it doesn't\n */\nasync function checkErc725YInterfaceId(address) {\n  // Create instance of the contract which has to be queried\n  const Contract = new web3.eth.Contract(AssetInterface, address);\n\n  const ERC725Y_INTERFACE_ID = '0x5a988c0f';\n\n  let interfaceCheck = false;\n\n  // Check if the contract has a key-value store\n  try {\n    interfaceChecks.isERC725 = await Contract.methods\n      .supportsInterface(ERC725Y_INTERFACE_ID)\n      .call();\n  } catch (error) {\n    console.log(error.message);\n    console.log('Address could not be checked for ERC725 interface');\n    return;\n  }\n\n  return interfaceCheck;\n}\n\n// Debug\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((standard) =>\n  console.log(standard),\n);\n"))),(0,r.kt)(i.Z,{value:"Current & Legacy Standards",label:"Current & Legacy Standards",mdxType:"TabItem"},(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Depending on the interface, the function accepts different parameters.")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"in the ",(0,r.kt)("strong",{parentName:"li"},"legacy")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ERC725Y")," interface, ",(0,r.kt)("inlineCode",{parentName:"li"},"getData(...)")," only takes a single key: ",(0,r.kt)("inlineCode",{parentName:"li"},"getData(key)"),"."),(0,r.kt)("li",{parentName:"ul"},"in the ",(0,r.kt)("strong",{parentName:"li"},"current")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ERC725Y")," interface, ",(0,r.kt)("inlineCode",{parentName:"li"},"getData(...)")," accepts an array of keys as input: ",(0,r.kt)("inlineCode",{parentName:"li"},"getData(keys[])"))),(0,r.kt)("p",{parentName:"div"},"The current standard therefore allows to fetch multiple values at once."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="asset_interface.json"',title:'"asset_interface.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\nconst SAMPLE_ASSET_ADDRESS = '0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78';\n\nconst AssetInterface = require('./asset_interface.json');\n\n/*\n * Check the interface of an\n * asset's smart contract\n *\n * @param address of asset\n * @return object of interface types\n */\nasync function checkErc725YInterfaceId(address) {\n  // Create instance of the contract which has to be queried\n  const Contract = new web3.eth.Contract(AssetInterface, address);\n\n  const interfaceIds = {\n    erc725Legacy: '0x2bd57b73',\n    erc725: '0x5a988c0f',\n  };\n\n  let interfaceChecks = {\n    isERC725Legacy: false,\n    isERC725: false,\n  };\n\n  // Check if the contract is a legacy key-value store interface\n  try {\n    interfaceChecks.isERC725Legacy = await Contract.methods\n      .supportsInterface(interfaceIds.erc725Legacy)\n      .call();\n  } catch (error) {\n    return console.log('Address could not be checked for legacy interface');\n  }\n\n  // Check if the contract is a current key-value store interface\n  try {\n    interfaceChecks.isERC725 = await Contract.methods\n      .supportsInterface(interfaceIds.erc725)\n      .call();\n  } catch (error) {\n    return console.log('Address could not be checked for interface');\n  }\n\n  return interfaceChecks;\n}\n\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((standard) =>\n  console.log(standard),\n);\n")))),(0,r.kt)("h2",{id:"step-4---receive-the-encoded-asset-data"},"Step 4 - Receive the encoded asset data"),(0,r.kt)("p",null,"Now we can safely call the data of the address. The ",(0,r.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4")," data is saved in a 725Y key-value store, and we need to input the right key to fetch the associated value. There are multiple keys for different properties. We will use the metadata key to give a showcase to receive the associated data."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Current Standards",label:"Current Standards",mdxType:"TabItem"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP4 JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_schema.json"',title:'"lsp4_schema.json"'},'[\n  {\n    "name": "SupportedStandards:LSP4DigitalCertificate",\n    "key": "0xeafec4d89fa9619884b6b89135626455000000000000000000000000abf0613c",\n    "keyType": "Mapping",\n    "valueContent": "0xabf0613c",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4TokenName",\n    "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4TokenSymbol",\n    "key": "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4Metadata",\n    "key": "0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e",\n    "keyType": "Singleton",\n    "valueContent": "JSONURL",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4Creators[]",\n    "key": "0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7",\n    "keyType": "Array",\n    "valueContent": "Number",\n    "valueType": "uint256",\n    "elementValueContent": "Address",\n    "elementValueType": "address"\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n// ABI's\nconst ERC725ABI = require('@erc725/smart-contracts/artifacts/ERC725.json');\nconst LSP4schema = require('./lsp4_schema.json');\n\n// Keys for properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Fetch the dataset of an asset\n * from the Universal Profile\n *\n * @param key of asset property\n * @return string of encoded data\n */\nasync function getAssetData(key) {\n  // Check if asset is ERC725Legacy or ERC725\n  let assetInterfaceID = await checkErc725YInterfaceId(SAMPLE_ASSET_ADDRESS);\n\n  try {\n    if (assetInterfaceID === true) {\n      // Instanciate ERC725 smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725ABI,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Key for the metadata\n      let keyArray = [key];\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods[\"getData(bytes32[])\"](keyArray).call();\n    }\n  } catch (error) {\n    return console.log('Data of assets address could not be loaded');\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey).then((encodedData) => console.log(encodedData));\n"))),(0,r.kt)(i.Z,{value:"Current & Legacy Standards",label:"Current & Legacy Standards",mdxType:"TabItem"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"ERC725 Legacy JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_interface.json"',title:'"erc725_legacy_interface.json"'},'[\n  {\n    "inputs": [\n      {\n        "internalType": "bytes32",\n        "name": "_keys",\n        "type": "bytes32"\n      }\n    ],\n    "name": "getData",\n    "outputs": [\n      {\n        "internalType": "bytes",\n        "name": "values",\n        "type": "bytes"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP4 JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_schema.json"',title:'"lsp4_schema.json"'},'[\n  {\n    "name": "SupportedStandards:LSP4DigitalCertificate",\n    "key": "0xeafec4d89fa9619884b6b89135626455000000000000000000000000abf0613c",\n    "keyType": "Mapping",\n    "valueContent": "0xabf0613c",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4TokenName",\n    "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4TokenSymbol",\n    "key": "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4Metadata",\n    "key": "0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e",\n    "keyType": "Singleton",\n    "valueContent": "JSONURL",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4Creators[]",\n    "key": "0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7",\n    "keyType": "Array",\n    "valueContent": "Number",\n    "valueType": "uint256",\n    "elementValueContent": "Address",\n    "elementValueType": "address"\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n// ABI's\nconst ERC725LegacyInterface = require('./erc725_legacy_interface.json');\nconst ERC725ABI = require('@erc725/smart-contracts/artifacts/ERC725.json');\nconst LSP4schema = require('./lsp4_schema.json');\n\n// Keys for properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n/*\n * Fetch the dataset of an asset\n * from the Universal Profile\n *\n * @param key of asset property\n * @return string of encoded data\n */\nasync function getAssetData(key) {\n  // Check if asset is ERC725Legacy or ERC725\n  let assetInterfaceIDs = await checkErc725YInterfaceId(SAMPLE_ASSET_ADDRESS);\n\n  try {\n    // Legacy interface\n    if (assetInterfaceIDs.isERC725Legacy === true) {\n      // Instanciate ERC725Legacy smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725LegacyInterface,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods.getData(key).call();\n    }\n    // Current interface\n    if (assetInterfaceIDs.isERC725 === true) {\n      // Instanciate ERC725 smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725ABI,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Key for the metadata\n      let keyArray = [key];\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods.getData(keyArray).call();\n    }\n  } catch (error) {\n    return console.log('Data of assets address could not be loaded');\n  }\n}\n\n// Debug\ngetAssetData(MetaDataKey).then((encodedData) => console.log(encodedData));\n")))),(0,r.kt)("h2",{id:"step-5---decode-the-asset-data"},"Step 5 - Decode the asset data"),(0,r.kt)("p",null,"We can now decode the encoded metadata to fetch readable information. We use\n",(0,r.kt)("inlineCode",{parentName:"p"},"decodeData()")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"erc725.js")," library. While using ERC725, we will have\nto declare a config and provider as we did while ",(0,r.kt)("a",{parentName:"p",href:"./read-profile-data"},"reading profile data"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n// Import ERC725\nconst { ERC725 } = require('@erc725/erc725.js');\n\n// Link to storage\nconst IPFS_GATEWAY_URL = 'https://ipfs.lukso.network/ipfs/';\n\n// ERC725 Properties\nconst provider = new Web3.providers.HttpProvider(\n  'https://rpc.l14.lukso.network',\n);\n\nconst config = {\n  ipfsGateway: IPFS_GATEWAY_URL,\n};\n\n// Content Phrases\nconst decodeNamePhrase = LSP4schema[1].name;\nconst decodeTokenPhrase = LSP4schema[2].name;\nconst decodeMetaPhrase = LSP4schema[3].name;\nconst decodeCreatorPhrase = LSP4schema[4].name;\n\n/*\n * Decode value from ERC725Y storage\n * based on it's key and phrase\n *\n * @param key of asset property\n * @param decodePhrase string of fetchable content\n * @return string of decoded data\n */\nasync function decodeData(key, decodePhrase) {\n  try {\n    let encodedData = await getAssetData(key);\n    // Instance of the LSP4 with ERC725.js\n    const erc725 = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config,\n    );\n    // Decode the assets data\n    return erc725.decodeData({ [decodePhrase]: encodedData });\n  } catch (error) {\n    console.log('Data of an asset could not be decoded');\n  }\n}\n\n// Debug\ndecodeData(MetaDataKey, decodeMetaPhrase).then((decodedData) =>\n  console.log(decodedData),\n);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../../standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4 Digital Asset Metadata")," will resolve in a following JSON structure:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show JSON response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "LSP4Metadata": {\n    "hashFunction": "keccak256(utf8)",\n    "hash": "0x...",\n    "url": "..."\n  }\n}\n'))),(0,r.kt)("h2",{id:"step-6---create-the-storage-link"},"Step 6 - Create the storage link"),(0,r.kt)("p",null,"To fetch the data for the previously decoded metadata, we can access the JSON file and change the URL to access its properties. You may not need this library if you use browser environments like ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactJS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"VueJS"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Profiles created on the ",(0,r.kt)("a",{parentName:"p",href:"https://universalprofile.cloud/"},"profile explorer")," currently use IPFS. Therefore, we will use a static IPFS link for the guide. If there are several storage solutions, you can change them or make distinctions."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n\n/*\n * Create a fetchable link for the asset data\n * that was embeded into the JSON metadata\n *\n * @return string of asset data URL\n */\nasync function getMetaDataLink() {\n  try {\n    let decodedData = await decodeData(MetaDataKey, decodeMetaPhrase);\n    // Generate IPFS link from decoded metadata\n    return IPFS_GATEWAY_URL + decodedData.LSP4Metadata.url.substring(7);\n  } catch (error) {\n    console.log('URL could not be fetched');\n  }\n}\n\n// Debug\ngetMetaDataLink().then((dataURL) => console.log(dataURL));\n")),(0,r.kt)("h2",{id:"step-7---get-the-asset-data"},"Step 7 - Get the asset data"),(0,r.kt)("p",null,"We can now access the created storage link through a simple URL call and are using ",(0,r.kt)("inlineCode",{parentName:"p"},"isomorphic-fetch")," to read the HTTP response from the asset URL in our ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," environment."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You may not need the ",(0,r.kt)("inlineCode",{parentName:"p"},"isomorphic-fetch")," library if you use browser environments like ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactJS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"VueJS"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n// Import\nrequire('isomorphic-fetch');\n\n/*\n * Fetch the asset data from a link\n *\n * @return string with asset data as JSON\n */\nasync function fetchAssetData() {\n  let dataURL = await getMetaDataLink();\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log('JSON data of IPFS link could not be fetched');\n  }\n}\n// Debug\nfetchAssetData().then((assetJSON) => console.log(assetJSON));\n")),(0,r.kt)("p",null,"For fetching metadata, the JSON file will have the following structure:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show JSON response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "LSP4Metadata": {\n    "description": "...",\n    "links": [],\n    "images": [\n      [\n        {\n          "width": 1512,\n          "height": 1998,\n          "hashFunction": "keccak256(bytes)",\n          "hash": "0x...",\n          "url": "..."\n        },\n        ...\n      ]\n    ],\n    "assets": [\n      {\n        "hash": "0x...",\n        "hashFunction": "keccak256(bytes)",\n        "fileType": "...",\n        "url": "..."\n      }\n    ]\n  }\n}\n'))),(0,r.kt)("h2",{id:"step-8---fetch-the-assets-properties"},"Step 8 - Fetch the asset's properties"),(0,r.kt)("p",null,"After receiving the asset data, we can fetch the JSON for its properties in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// ...\n\nlet assetImageLinks = [];\nlet fullSizeAssetImage;\nlet assetDescription;\n\n/*\n * Read properties of an asset\n */\nasync function getAssetProperties() {\n  let assetJSON = await fetchAssetData();\n  let assetImageData = [];\n\n  try {\n    assetImageData = assetJSON.LSP4Metadata.images;\n    for (let i in assetImageData[0]) {\n      assetImageLinks.push([i, IPFS_GATEWAY_URL + assetImageData[0][i].url]);\n    }\n    fullSizeAssetImage = assetImageLinks[0][1];\n\n    assetDescription = assetJSON.LSP4Metadata.description;\n\n    console.log('Asset Description ' + assetDescription);\n    console.log('Full Size Asset Image Link: ' + fullSizeAssetImage + '\\n');\n    console.log(\n      'Asset Image Links: ' +\n        JSON.stringify(assetImageLinks, undefined, 2) +\n        '\\n',\n    );\n  } catch (error) {\n    console.log('Could not fetch all asset properties');\n  }\n}\n\n// Debug\ngetAssetProperties();\n")),(0,r.kt)("h2",{id:"final-code"},"Final Code"),(0,r.kt)("p",null,"Below is the complete code snippet of this guide, with all the steps compiled together."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Current Standads",label:"Current Standards",mdxType:"TabItem"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP1 Minimal JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp1_minimal_interface.json"',title:'"lsp1_minimal_interface.json"'},'[\n  {\n    "inputs": [],\n    "name": "getAllRawValues",\n    "outputs": [\n      {\n        "internalType": "bytes32[]",\n        "name": "",\n        "type": "bytes32[]"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="asset_interface.json"',title:'"asset_interface.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP4 JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_schema.json"',title:'"lsp4_schema.json"'},'[\n  {\n    "name": "SupportedStandards:LSP4DigitalCertificate",\n    "key": "0xeafec4d89fa9619884b6b89135626455000000000000000000000000abf0613c",\n    "keyType": "Mapping",\n    "valueContent": "0xabf0613c",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4TokenName",\n    "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4TokenSymbol",\n    "key": "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4Metadata",\n    "key": "0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e",\n    "keyType": "Singleton",\n    "valueContent": "JSONURL",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4Creators[]",\n    "key": "0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7",\n    "keyType": "Array",\n    "valueContent": "Number",\n    "valueType": "uint256",\n    "elementValueContent": "Address",\n    "elementValueType": "address"\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// Import and Setup\nconst Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\nconst { ERC725 } = require('@erc725/erc725.js');\nrequire('isomorphic-fetch');\n\n// Our static sample addresses\nconst SAMPLE_UNIVERSAL_RECEIVER = '0x50a02ef693ff6961a7f9178d1e53cc8bbe1dad68';\nconst SAMPLE_PROFILE_ADDRESS = '0x0C03fBa782b07bCf810DEb3b7f0595024A444F4e';\nconst SAMPLE_ASSET_ADDRESS = '0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78';\nconst IPFS_GATEWAY_URL = 'https://ipfs.lukso.network/ipfs/';\n\n// ABIs\nconst ERC725ABI = require('@erc725/smart-contracts/artifacts/ERC725.json');\nconst LSP8 = require('@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json');\n\nconst LSP1MinimalInterface = require('./lsp1_minimal_interface.json');\nconst LSP4schema = require('./lsp4_schema.json');\nconst AssetInterface = require('./asset_interface.json');\n\n// Keys for properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n// Content Phrases\nconst decodeNamePhrase = LSP4schema[1].name;\nconst decodeTokenPhrase = LSP4schema[2].name;\nconst decodeMetaPhrase = LSP4schema[3].name;\nconst decodeCreatorPhrase = LSP4schema[4].name;\n\n// ERC725 Properties\nconst provider = new Web3.providers.HttpProvider(\n  'https://rpc.l14.lukso.network',\n);\n\nconst config = {\n  ipfsGateway: IPFS_GATEWAY_URL,\n};\n\nlet assetImageLinks = [];\nlet fullSizeAssetImage;\nlet assetDescription;\n\n/*\n * Return array of blockchain addresses of\n * assets, that were received by the\n * Univeral Profile holder.\n *\n * @return address[] of assets\n */\nasync function getAssetAddressses() {\n  const AddressStore = new web3.eth.Contract(\n    LSP1MinimalInterface,\n    SAMPLE_UNIVERSAL_RECEIVER,\n  );\n\n  let rawValues = [];\n\n  try {\n    // Fetch all raw values\n    rawValues = await AddressStore.methods.getAllRawValues().call();\n  } catch (error) {\n    return console.log('Data from universal receiver could not be loaded');\n  }\n\n  let digitalAssets = [];\n\n  // Retrieve addresses\n  for (let i = 0; i < rawValues.length; i++) {\n    digitalAssets[i] = web3.utils.toChecksumAddress(rawValues[i].substr(26));\n  }\n  return digitalAssets;\n}\n\n/*\n * Return array of blockchain addresses\n * of assets that are owned by the\n * Univeral Profile.\n *\n * @param owner Universal Profile address\n * @return address[] of owned assets\n */\nasync function getOwnedAddresses(owner) {\n  let digitalAssets = await getAssetAddressses();\n  let ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    let isCurrentOwner;\n\n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n/*\n * Check the interface of an\n * asset's smart contract\n *\n * @param address of asset\n * @return object of interface types\n */\nasync function checkErc725YInterfaceId(address) {\n  // Create instance of the contract which has to be queried\n  const Contract = new web3.eth.Contract(AssetInterface, address);\n\n  const ERC725Y_INTERFACE_ID = '0x5a988c0f';\n\n  let interfaceCheck = false;\n\n  // Check if the contract has a key-value store\n  try {\n    interfaceChecks.isERC725 = await Contract.methods\n      .supportsInterface(ERC725Y_INTERFACE_ID)\n      .call();\n  } catch (error) {\n    return console.log('Address could not be checked for interface');\n  }\n\n  return interfaceCheck;\n}\n\n/*\n * Fetch the dataset of an asset\n * from the Universal Profile\n *\n * @param key of asset property\n * @return string of encoded data\n */\nasync function getAssetData(key) {\n  // Check if asset is ERC725Legacy or ERC725\n  let assetInterfaceID = await checkErc725YInterfaceId(SAMPLE_ASSET_ADDRESS);\n\n  try {\n    if (assetInterfaceID === true) {\n      // Instanciate ERC725 smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725ABI,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Key for the metadata\n      let keyArray = [key];\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods[\"getData(bytes32[])\"](keyArray).call();\n    }\n  } catch (error) {\n    return console.log('Data of assets address could not be loaded');\n  }\n}\n\n/*\n * Decode value from ERC725Y storage\n * based on it's key and phrase\n *\n * @param key of asset property\n * @param decodePhrase string of fetchable content\n * @return string of decoded data\n */\nasync function decodeData(key, decodePhrase) {\n  try {\n    let encodedData = await getAssetData(key);\n    // Instance of the LSP4 with ERC725.js\n    const erc725 = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config,\n    );\n    // Decode the assets data\n    return erc725.decodeData({ [decodePhrase]: encodedData });\n  } catch (error) {\n    console.log('Data of an asset could not be decoded');\n  }\n}\n\n/*\n * Create a fetchable link for the asset data\n * that was embeded into the JSON metadata\n *\n * @return string of asset data URL\n */\nasync function getMetaDataLink() {\n  let decodedData = await decodeData(MetaDataKey, decodeMetaPhrase);\n  // Generate IPFS link from decoded metadata\n  return IPFS_GATEWAY_URL + decodedData.LSP4Metadata.url.substring(7);\n}\n\n/*\n * Fetch the asset data from a link\n *\n * @return string with asset data as JSON\n */\nasync function fetchAssetData() {\n  let dataURL = await getMetaDataLink();\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log('JSON data of IPFS link could not be fetched');\n  }\n}\n\n/*\n * Read properties of an asset\n */\nasync function getAssetProperties() {\n  let assetJSON = await fetchAssetData();\n  let assetImageData = [];\n\n  try {\n    assetImageData = assetJSON.LSP4Metadata.images;\n    for (let i in assetImageData[0]) {\n      assetImageLinks.push([i, IPFS_GATEWAY_URL + assetImageData[0][i].url]);\n    }\n    fullSizeAssetImage = assetImageLinks[0][1];\n\n    assetDescription = assetJSON.LSP4Metadata.description;\n\n    console.log('Asset Description ' + assetDescription);\n    console.log('Full Size Asset Image Link: ' + fullSizeAssetImage + '\\n');\n    console.log(\n      'Asset Image Links: ' +\n        JSON.stringify(assetImageLinks, undefined, 2) +\n        '\\n',\n    );\n  } catch (error) {\n    console.log('Could not fetch all asset properties');\n  }\n}\n\n// Debug Step 1\ngetAssetAddressses().then((digitalAssets) => console.log(digitalAssets));\n\n// Debug Step 2\ngetOwnedAddresses(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(ownedAssets),\n);\n\n// Debug Step 3\ngetAssetData(MetaDataKey).then((encodedData) => console.log(encodedData));\n\n// Debug Step 4\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((standard) =>\n  console.log(standard),\n);\n\n// Debug Step 5\ndecodeData(MetaDataKey, decodeMetaPhrase).then((decodedData) =>\n  console.log(decodedData),\n);\n\n// Debug Step 6\ngetMetaDataLink().then((dataURL) => console.log(dataURL));\n\n// Debug Step 7\nfetchAssetData().then((assetJSON) => console.log(assetJSON));\n\n// Debug Step 8\ngetAssetProperties();\n"))),(0,r.kt)(i.Z,{value:"Current & Legacy Standads",label:"Current & Legacy Standards",mdxType:"TabItem"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP1 Minimal JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp1_minimal_interface.json"',title:'"lsp1_minimal_interface.json"'},'[\n  {\n    "inputs": [],\n    "name": "getAllRawValues",\n    "outputs": [\n      {\n        "internalType": "bytes32[]",\n        "name": "",\n        "type": "bytes32[]"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="asset_interface.json"',title:'"asset_interface.json"'},'[\n  {\n    "type": "function",\n    "stateMutability": "view",\n    "outputs": [\n      {\n        "type": "bool",\n        "name": "",\n        "internalType": "bool"\n      }\n    ],\n    "name": "supportsInterface",\n    "inputs": [\n      {\n        "type": "bytes4",\n        "name": "interfaceId",\n        "internalType": "bytes4"\n      }\n    ]\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"LSP4 JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="lsp4_schema.json"',title:'"lsp4_schema.json"'},'[\n  {\n    "name": "SupportedStandards:LSP4DigitalCertificate",\n    "key": "0xeafec4d89fa9619884b6b89135626455000000000000000000000000abf0613c",\n    "keyType": "Mapping",\n    "valueContent": "0xabf0613c",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4TokenName",\n    "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4TokenSymbol",\n    "key": "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",\n    "keyType": "Singleton",\n    "valueContent": "String",\n    "valueType": "string"\n  },\n  {\n    "name": "LSP4Metadata",\n    "key": "0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e",\n    "keyType": "Singleton",\n    "valueContent": "JSONURL",\n    "valueType": "bytes"\n  },\n  {\n    "name": "LSP4Creators[]",\n    "key": "0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7",\n    "keyType": "Array",\n    "valueContent": "Number",\n    "valueType": "uint256",\n    "elementValueContent": "Address",\n    "elementValueType": "address"\n  }\n]\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"ERC725 Legacy JSON Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="erc725_legacy_interface.json"',title:'"erc725_legacy_interface.json"'},'[\n  {\n    "inputs": [\n      {\n        "internalType": "bytes32",\n        "name": "_keys",\n        "type": "bytes32"\n      }\n    ],\n    "name": "getData",\n    "outputs": [\n      {\n        "internalType": "bytes",\n        "name": "values",\n        "type": "bytes"\n      }\n    ],\n    "stateMutability": "view",\n    "type": "function"\n  }\n]\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="read_assets.js"',title:'"read_assets.js"'},"// Import and Setup\nconst Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\nconst { ERC725 } = require('@erc725/erc725.js');\nrequire('isomorphic-fetch');\n\n// ABIs\nconst LSP8 = require('@lukso/lsp-smart-contracts/artifacts/LSP8IdentifiableDigitalAsset.json');\nconst ERC725ABI = require('@erc725/smart-contracts/artifacts/ERC725.json');\n\nconst ERC725LegacyInterface = require('./erc725_legacy_interface.json');\nconst LSP1MinimalInterface = require('./lsp1_minimal_interface.json');\nconst LSP4schema = require('./lsp4_schema.json');\nconst AssetInterface = require('./asset_interface.json');\n\n// Our static sample addresses\nconst SAMPLE_UNIVERSAL_RECEIVER = '0x50a02ef693ff6961a7f9178d1e53cc8bbe1dad68';\nconst SAMPLE_PROFILE_ADDRESS = '0x0C03fBa782b07bCf810DEb3b7f0595024A444F4e';\nconst SAMPLE_ASSET_ADDRESS = '0xc444009d38d3046bb0cF81Fa2Cd295ce46A67C78';\nconst IPFS_GATEWAY_URL = 'https://ipfs.lukso.network/ipfs/';\n\n// Keys for properties\nconst TokenNameKey = LSP4schema[1].key;\nconst TokenSymbolKey = LSP4schema[2].key;\nconst MetaDataKey = LSP4schema[3].key;\nconst CreatorsKey = LSP4schema[4].key;\n\n// Content Phrases\nconst decodeNamePhrase = LSP4schema[1].name;\nconst decodeTokenPhrase = LSP4schema[2].name;\nconst decodeMetaPhrase = LSP4schema[3].name;\nconst decodeCreatorPhrase = LSP4schema[4].name;\n\n// ERC725 Properties\nconst provider = new Web3.providers.HttpProvider(\n  'https://rpc.l14.lukso.network',\n);\n\nconst config = {\n  ipfsGateway: IPFS_GATEWAY_URL,\n};\n\nlet assetImageLinks = [];\nlet fullSizeAssetImage;\nlet assetDescription;\n\n/*\n * Return array of blockchain addresses of\n * assets, that were received by the\n * Univeral Profile holder.\n *\n * @return address[] of assets\n */\nasync function getAssetAddressses() {\n  const AddressStore = new web3.eth.Contract(\n    LSP1MinimalInterface,\n    SAMPLE_UNIVERSAL_RECEIVER,\n  );\n\n  let rawValues = [];\n\n  try {\n    // Fetch all raw values\n    rawValues = await AddressStore.methods.getAllRawValues().call();\n  } catch (error) {\n    return console.log('Data from universal receiver could not be loaded');\n  }\n\n  let digitalAssets = [];\n\n  // Retrieve addresses\n  for (let i = 0; i < rawValues.length; i++) {\n    digitalAssets[i] = web3.utils.toChecksumAddress(rawValues[i].substr(26));\n  }\n  return digitalAssets;\n}\n\n/*\n * Return array of blockchain addresses\n * of assets that are owned by the\n * Univeral Profile.\n *\n * @param owner Universal Profile address\n * @return address[] of owned assets\n */\nasync function getOwnedAddresses(owner) {\n  let digitalAssets = await getAssetAddressses();\n  let ownedAssets = [];\n\n  for (let i = 0; i < digitalAssets.length; i++) {\n    let isCurrentOwner;\n\n    // Create instance of the asset to check owner balance\n    const LSP8Contract = new web3.eth.Contract(LSP8.abi, digitalAssets[i]);\n\n    isCurrentOwner = await LSP8Contract.methods.balanceOf(owner).call();\n    if (isCurrentOwner > 0) {\n      ownedAssets[ownedAssets.length] = digitalAssets[i];\n    }\n  }\n  return ownedAssets;\n}\n\n/*\n * Check the interface of an\n * asset's smart contract\n *\n * @param address of asset\n * @return object of interface types\n */\nasync function checkErc725YInterfaceId(address) {\n  // Create instance of the contract which has to be queried\n  const Contract = new web3.eth.Contract(AssetInterface, address);\n\n  const interfaceIds = {\n    erc725Legacy: '0x2bd57b73',\n    erc725: '0x5a988c0f',\n  };\n\n  let interfaceChecks = {\n    isERC725Legacy: false,\n    isERC725: false,\n  };\n\n  // Check if the contract is a legacy key-value store interface\n  try {\n    interfaceChecks.isERC725Legacy = await Contract.methods\n      .supportsInterface(interfaceIds.erc725Legacy)\n      .call();\n  } catch (error) {\n    console.log('Address could not be checked for legacy ERC725Y interface');\n    console.log(error.message);\n    return;\n  }\n\n  // Check if the contract is a current key-value store interface\n  try {..\n    interfaceChecks.isERC725 = await Contract.methods\n      .supportsInterface(interfaceIds.erc725)\n      .call();\n  } catch (error) {\n    console.log('Address could not be checked for ERC725 interface');\n    console.log(error.message);\n    return;\n  }\n\n  return interfaceChecks;\n}\n\n/*\n * Fetch the dataset of an asset\n * from the Universal Profile\n *\n * @param key of asset property\n * @return string of encoded data\n */\nasync function getAssetData(key) {\n  // Check if asset is ERC725Legacy or ERC725\n  let assetInterfaceIDs = await checkErc725YInterfaceId(SAMPLE_ASSET_ADDRESS);\n\n  try {\n    // Legacy interface\n    if (assetInterfaceIDs.isERC725Legacy === true) {\n      // Instanciate ERC725Legacy smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725LegacyInterface,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods.getData(key).call();\n    }\n    // Current interface\n    if (assetInterfaceIDs.isERC725 === true) {\n      // Instanciate ERC725 smart contract\n      const digitalAsset = new web3.eth.Contract(\n        ERC725ABI,\n        SAMPLE_ASSET_ADDRESS,\n      );\n\n      // Key for the metadata\n      let keyArray = [key];\n\n      // Fetch the encoded contract data\n      return await digitalAsset.methods.getData(keyArray).call();\n    }\n  } catch (error) {\n    return console.log('Data of assets address could not be loaded');\n  }\n}\n\n/*\n * Decode value from ERC725Y storage\n * based on it's key and phrase\n *\n * @param key of asset property\n * @param decodePhrase string of fetchable content\n * @return string of decoded data\n */\nasync function decodeData(key, decodePhrase) {\n  try {\n    let encodedData = await getAssetData(key);\n    // Instance of the LSP4 with ERC725.js\n    const erc725 = new ERC725(\n      LSP4schema,\n      SAMPLE_ASSET_ADDRESS,\n      provider,\n      config,\n    );\n    // Decode the assets data\n    return erc725.decodeData({ [decodePhrase]: encodedData });\n  } catch (error) {\n    console.log('Data of an asset could not be decoded');\n  }\n}\n\n/*\n * Create a fetchable link for the asset data\n * that was embeded into the JSON metadata\n *\n * @return string of asset data URL\n */\nasync function getMetaDataLink() {\n  try {\n    let decodedData = await decodeData(MetaDataKey, decodeMetaPhrase);\n    // Generate IPFS link from decoded metadata\n    return IPFS_GATEWAY_URL + decodedData.LSP4Metadata.url.substring(7);\n  } catch (error) {\n    console.log('URL could not be fetched');\n  }\n}\n\n/*\n * Fetch the asset data from a link\n *\n * @return string with asset data as JSON\n */\nasync function fetchAssetData() {\n  let dataURL = await getMetaDataLink();\n  try {\n    const response = await fetch(dataURL);\n    return await response.json();\n  } catch (error) {\n    console.log('JSON data of IPFS link could not be fetched');\n  }\n}\n\n/*\n * Read properties of an asset\n */\nasync function getAssetProperties() {\n  let assetJSON = await fetchAssetData();\n  let assetImageData = [];\n\n  try {\n    assetImageData = assetJSON.LSP4Metadata.images;\n    for (let i in assetImageData[0]) {\n      assetImageLinks.push([i, IPFS_GATEWAY_URL + assetImageData[0][i].url]);\n    }\n    fullSizeAssetImage = assetImageLinks[0][1];\n\n    assetDescription = assetJSON.LSP4Metadata.description;\n\n    console.log('Asset Description ' + assetDescription);\n    console.log('Full Size Asset Image Link: ' + fullSizeAssetImage + '\\n');\n    console.log(\n      'Asset Image Links: ' +\n        JSON.stringify(assetImageLinks, undefined, 2) +\n        '\\n',\n    );\n  } catch (error) {\n    console.log('Could not fetch all asset properties');\n  }\n}\n\n// Step 1\ngetAssetAddressses().then((digitalAssets) => console.log(digitalAssets));\n\n// Step 2\ngetOwnedAddresses(SAMPLE_PROFILE_ADDRESS).then((ownedAssets) =>\n  console.log(\n    `Addresses of assets owned by: ${SAMPLE_ASSET_ADDRESS}:`,\n    ownedAssets,\n  ),\n);\n\n// Step 3\ngetAssetData(MetaDataKey).then((encodedData) => console.log(encodedData));\n\n// Step 4\ncheckErc725YInterfaceId(SAMPLE_ASSET_ADDRESS).then((standard) =>\n  console.log(standard),\n);\n\n// Step 5\ndecodeData(MetaDataKey, decodeMetaPhrase).then((decodedData) =>\n  console.log(decodedData),\n);\n\n// Step 6\ngetMetaDataLink().then((dataURL) => console.log(dataURL));\n\n// Step 7\nfetchAssetData().then((assetJSON) => console.log(assetJSON));\n\n// Step 8\ngetAssetProperties();\n")))))}m.isMDXComponent=!0},3866:function(e,n,t){n.Z=t.p+"assets/images/example-asset-dd5a54e12a4dd980896dc69d4d2633d7.png"}}]);