"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[198],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(a),u=r,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return a?n.createElement(k,s(s({ref:t},c),{},{components:a})):n.createElement(k,s({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},964:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={sidebar_label:"LSP2 - ERC725Y JSON Schema",sidebar_position:3.3},p="LSP2 - ERC725Y JSON Schema",l={unversionedId:"standards/generic-standards/lsp2-json-schema",id:"standards/generic-standards/lsp2-json-schema",title:"LSP2 - ERC725Y JSON Schema",description:"LSP2 - ERC725Y JSON Schema",source:"@site/docs/standards/generic-standards/01-lsp2-json-schema.md",sourceDirName:"standards/generic-standards",slug:"/standards/generic-standards/lsp2-json-schema",permalink:"/standards/generic-standards/lsp2-json-schema",editUrl:"https://github.com/lukso-network/docs/tree/main/docs/standards/generic-standards/01-lsp2-json-schema.md",tags:[],version:"current",sidebarPosition:3.3,frontMatter:{sidebar_label:"LSP2 - ERC725Y JSON Schema",sidebar_position:3.3},sidebar:"standardsSidebar",previous:{title:"LSP1 - Universal Receiver",permalink:"/standards/generic-standards/lsp1-universal-receiver"},next:{title:"Introduction",permalink:"/standards/universal-profile/introduction"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"What does this standard represent?",id:"what-does-this-standard-represent",children:[{value:"Specification",id:"specification",children:[],level:3},{value:"How does LSP2 work?",id:"how-does-lsp2-work",children:[],level:3}],level:2},{value:"Key Types",id:"key-types",children:[{value:"Singleton",id:"singleton",children:[],level:3},{value:"Array",id:"array",children:[],level:3},{value:"Mapping",id:"mapping",children:[],level:3},{value:"Bytes20Mapping",id:"bytes20mapping",children:[],level:3},{value:"Bytes20MappingWithGrouping",id:"bytes20mappingwithgrouping",children:[],level:3}],level:2}],d={toc:c};function m(e){var t=e.components,o=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lsp2---erc725y-json-schema"},"LSP2 - ERC725Y JSON Schema"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Standard Document")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md"},"LSP2 - ERC725Y JSON Schema")))),(0,i.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Recommendation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Our ",(0,i.kt)("a",{parentName:"p",href:"/tools/erc725js/getting-started"},"JavaScript library ",(0,i.kt)("inlineCode",{parentName:"a"},"erc725.js"))," makes it easy to read + write data encoded according to the LSP2 Schema, without going through all the encoding complexity manually."))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Data in the storage of a smart contract is organised in ",(0,i.kt)("strong",{parentName:"p"},"slots"),". Each piece of data is stored at a specific storage slot. These slots are numbered (as a ",(0,i.kt)("inlineCode",{parentName:"p"},"uint256"),"), starting from slot 0."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Smart contracts understand only 2 languages: ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"uint256"),".")),(0,i.kt)("p",null,"Take the following key-value pair for instance. It is not easy to infer the meaning of these keys by reading them as ",(0,i.kt)("strong",{parentName:"p"},"bytes"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(key)                                                              => (value)\n0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1 => 0x4d7920546f6b656e20322e30\n")),(0,i.kt)("p",null,"Using ",(0,i.kt)("strong",{parentName:"p"},"slots numbers")," and ",(0,i.kt)("strong",{parentName:"p"},"raw bytes")," makes the contract storage very hard to work with. ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account#erc725y---generic-key-value-store"},"ERC725Y")," solves part of the problem through a more flexible storage layout, where data is addressed via ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes32")," keys. However with such low-level languages, this makes it difficult for humans to understand the data in the storage."),(0,i.kt)("p",null,"Finally, everyone can store information differently on contracts like ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},"ERC725Account"),", depending on individual use cases and needs. There is no standard schema that defines what is the data and what the data looks like. This makes it very hard for ERC725Account to interact with each other, and for external services to interact with ERC725Accounts."),(0,i.kt)("h2",{id:"what-does-this-standard-represent"},"What does this standard represent?"),(0,i.kt)("h3",{id:"specification"},"Specification"),(0,i.kt)("p",null,"LSP2 aims to offer a better abstraction on top of a smart contract storage."),(0,i.kt)("p",null,"This standard introduces a JSON schema that enables to represent the storage of a smart contract through more understandable keys. Data in a smart contract can be stored in a more organised way."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Universal Profile + ERC725Y JSON schema (diagram)",src:a(9914).Z,width:"1692",height:"590"})),(0,i.kt)("p",null,"By introducing a schema, contract storage can be represented in the same way across contracts in the network. Everyone has a unified view of the data stored between smart contracts. Data can then be easily parsed, and contracts or interfaces can read or write data from/to the contract storage in the same manner. This makes smart contracts ",(0,i.kt)("strong",{parentName:"p"},"more interoperable with each other"),"."),(0,i.kt)("h3",{id:"how-does-lsp2-work"},"How does LSP2 work?"),(0,i.kt)("p",null,"LSP2 introduces new ways to encode data, depending on its type. From a single entry, to multiple entries (like arrays or maps)."),(0,i.kt)("p",null,"A key in the contract storage can be defined as a JSON object, with properties that describes the key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "LSP4TokenName",\n  "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n  "keyType": "Singleton",\n  "valueType": "string",\n  "valueContent": "String"\n}\n')),(0,i.kt)("h2",{id:"key-types"},"Key Types"),(0,i.kt)("p",null,"There are several ",(0,i.kt)("strong",{parentName:"p"},"key types")," defined in LSP2."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#lsp2---erc725y-json-schema"},"LSP2 - ERC725Y JSON Schema"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#what-does-this-standard-represent"},"What does this standard represent?"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#specification"},"Specification")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#how-does-lsp2-work"},"How does LSP2 work?")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#key-types"},"Key Types"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#singleton"},"Singleton")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#array"},"Array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mapping"},"Mapping")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#bytes20mapping"},"Bytes20Mapping")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#bytes20mappingwithgrouping"},"Bytes20MappingWithGrouping"))))))),(0,i.kt)("h3",{id:"singleton"},"Singleton"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"Singleton")," key is useful to store a unique single value under a single key."),(0,i.kt)("p",null,"Below is an example of a ",(0,i.kt)("strong",{parentName:"p"},"Singleton")," key type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "LSP4TokenName",\n  "key": "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1",\n  "keyType": "Singleton",\n  "valueType": "string",\n  "valueContent": "String"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LSP2 Singleton key type",src:a(1314).Z,width:"1696",height:"589"})),(0,i.kt)("h3",{id:"array"},"Array"),(0,i.kt)("p",null,"A key of type ` ",(0,i.kt)("strong",{parentName:"p"},"Array")," can be used to store a list of elements of same data type. Elements are accessed by an ",(0,i.kt)("em",{parentName:"p"},"index"),", that defines their position in the array."),(0,i.kt)("p",null,"All the elements in the array are arranged systematically, in the order they are added or removed to/from the array. The key principles of the LSP2 ",(0,i.kt)("strong",{parentName:"p"},"Array")," key type are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ordering matters")," \u2757"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"duplicates are permitted")," \u2705")),(0,i.kt)("p",null,"A key type ",(0,i.kt)("strong",{parentName:"p"},"Array")," can be useful when there is the need to store a large group of similar data items under the same key. For instance, a list of tokens or NFTs that an address has received."),(0,i.kt)("p",null,"Below is an example of an ",(0,i.kt)("strong",{parentName:"p"},"Array")," key type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "LSP5ReceivedAssets[]",\n  "key": "0x6460ee3c0aac563ccbf76d6e1d07bada78e3a9514e6382b736ed3f478ab7b90b",\n  "keyType": "Array",\n  "valueType": "address",\n  "valueContent": "Address"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LSP2 Array key type",src:a(9494).Z,width:"1477",height:"676"})),(0,i.kt)("h3",{id:"mapping"},"Mapping"),(0,i.kt)("p",null,"A key of type ",(0,i.kt)("strong",{parentName:"p"},"Mapping")," can be useful to store a collection of data items that have a shared significance (for instance, items that are derived from a common ancestor type)."),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Mapping")," key type is similar to the concept of lookup tables. It can be used for easily searching and querying specific elements in the collection, without the need to loop through all the elements (unlike an ",(0,i.kt)("a",{parentName:"p",href:"#array"},"Array"),"). The key principle of the ",(0,i.kt)("strong",{parentName:"p"},"Mapping")," key type are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"ordering does not matter")," \u2705"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"duplicates are not permitted")," \u274c")),(0,i.kt)("p",null,"Below is an example of a ",(0,i.kt)("strong",{parentName:"p"},"Mapping")," key type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "SupportedStandards:LSP3UniversalProfile",\n  "key": "0xeafec4d89fa9619884b6b89135626455000000000000000000000000abe425d6",\n  "keyType": "Mapping",\n  "valueType": "bytes4",\n  "valueContent": "0xabe425d6"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LSP2 Mapping key type",src:a(2447).Z,width:"1547",height:"646"})),(0,i.kt)("h3",{id:"bytes20mapping"},"Bytes20Mapping"),(0,i.kt)("p",null,"A key of type ",(0,i.kt)("strong",{parentName:"p"},"Bytes20Mapping")," is similar to the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#mapping"},"Mapping"))," key type, except that it can be useful to map specific informations or data to a 20-bytes long value, like an ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," for instance."),(0,i.kt)("p",null,"Below is an example of ",(0,i.kt)("strong",{parentName:"p"},"Bytes20Mapping")," key type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "LSP8MetadataAddress:0x20BytesTokenIdHash",\n  "key": "0x73dcc7c3c4096cdc00000000cafecafecafecafecafecafecafecafecafecafe",\n  "keyType": "Bytes20Mapping",\n  "valueType": "Mixed",\n  "valueContent": "Mixed"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LSP2 Bytes20Mapping key type",src:a(5853).Z,width:"1395",height:"716"})),(0,i.kt)("h3",{id:"bytes20mappingwithgrouping"},"Bytes20MappingWithGrouping"),(0,i.kt)("p",null,"A key of type ",(0,i.kt)("strong",{parentName:"p"},"Bytes20MappingWithGrouping")," is similar to the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#bytes20mapping"},"Bytes20Mapping"))," key type, with the exception that sub-types can be adding to the main mapping key."),(0,i.kt)("p",null,"It can be used for instance to differentiate various types of the main mapping keys, like different type of permissions (see ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"LSP6 - Key Manager"),")."),(0,i.kt)("p",null,"Below is an example of a ",(0,i.kt)("strong",{parentName:"p"},"Bytes20MappingWithGrouping")," key type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "AddressPermissions:Permissions:<address>",\n  "key": "0x4b80742d0000000082ac0000<address>",\n  "keyType": "Bytes20MappingWithGrouping",\n  "valueType": "bytes32",\n  "valueContent": "BitArray"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"LSP2 Bytes20MappingWithGrouping key type",src:a(7775).Z,width:"1463",height:"683"})))}m.isMDXComponent=!0},9914:function(e,t,a){t.Z=a.p+"assets/images/ERC725Y-JSON-Schema-explained-ebb9fd1e6c2c1c77fa7bf75232737ef9.jpeg"},9494:function(e,t,a){t.Z=a.p+"assets/images/lsp2-key-type-array-dc4ba66d887061ade7a4ebe74f803222.jpeg"},7775:function(e,t,a){t.Z=a.p+"assets/images/lsp2-key-type-bytes20-mapping-with-grouping-da79d6789590980dc03c6e376f5ea084.jpeg"},5853:function(e,t,a){t.Z=a.p+"assets/images/lsp2-key-type-bytes20-mapping-489e936fa8a9da50b19c545fe5db5426.jpeg"},2447:function(e,t,a){t.Z=a.p+"assets/images/lsp2-key-type-mapping-519c56d9431c16159fea3b5ac39a0c86.jpeg"},1314:function(e,t,a){t.Z=a.p+"assets/images/lsp2-key-type-singleton-f5773adc076859513bc0ca4821bab47c.jpeg"}}]);