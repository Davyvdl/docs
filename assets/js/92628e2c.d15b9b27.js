"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[8477],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(3117),a=n(7294),o=n(2389),l=n(9443);var i=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(6681),u=n(6010),c="tabItem_1uMI";function d(e){var t,n,o,l=e.lazy,d=e.block,p=e.defaultValue,f=e.values,m=e.groupId,h=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=f?f:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,s.lx)(y,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=v[0])?void 0:o.props.value;if(null!==b&&!y.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=i(),w=g.tabGroupChoices,P=g.setTabGroupChoices,N=(0,a.useState)(b),x=N[0],L=N[1],C=[],O=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var U=w[m];null!=U&&U!==x&&y.some((function(e){return e.value===U}))&&L(U)}var T=function(e){var t=e.currentTarget,n=C.indexOf(t),r=y[n].value;r!==x&&(O(t),L(r),null!=m&&P(m,r))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=C.indexOf(e.currentTarget)+1;n=C[r]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;n=C[a]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":d},h)},y.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return C.push(e)},onKeyDown:E,onFocus:T,onClick:T},o,{className:(0,u.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),l?(0,a.cloneElement)(v.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function p(e){var t=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},2711:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=(n(6396),n(8215),["components"]),i={sidebar_label:"Transfer LYX",sidebar_position:1.3},s="Transfer LYX",u={unversionedId:"guides/universal-profile/transfer-lyx",id:"guides/universal-profile/transfer-lyx",title:"Transfer LYX",description:"In this tutorial, we will learn how to transfer LYX from one Universal Profile (UP) to another Universal Profile, or any other address.",source:"@site/docs/guides/universal-profile/03-transfer-lyx.md",sourceDirName:"guides/universal-profile",slug:"/guides/universal-profile/transfer-lyx",permalink:"/guides/universal-profile/transfer-lyx",editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-profile/03-transfer-lyx.md",tags:[],version:"current",sidebarPosition:1.3,frontMatter:{sidebar_label:"Transfer LYX",sidebar_position:1.3},sidebar:"guidesSidebar",previous:{title:"Edit a Universal Profile",permalink:"/guides/universal-profile/edit-profile"},next:{title:"Interact with other contracts",permalink:"/guides/universal-profile/interact-with-contracts"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Step 1: create the contract instances",id:"step-1-create-the-contract-instances",children:[],level:2},{value:"Step 2: Encode the payload to transfer LYX",id:"step-2-encode-the-payload-to-transfer-lyx",children:[],level:2},{value:"Step 3: send the payload to the Key Manager",id:"step-3-send-the-payload-to-the-key-manager",children:[],level:2},{value:"Final Code",id:"final-code",children:[],level:2}],d={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transfer-lyx"},"Transfer LYX"),(0,o.kt)("p",null,"In this tutorial, we will learn how to transfer LYX from one Universal Profile (UP) to another Universal Profile, or any other ",(0,o.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"To interact with a Universal Profile (UP), all interactions should go through the Key Manager (KM). The KM will allow / disallow execution after checking the ",(0,o.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permission-values"},"permissions")," of the calling address."),(0,o.kt)("p",null,"Therefore to interact with our UP, we will need to encode the function call of our UP and pass the ",(0,o.kt)("strong",{parentName:"p"},"payload")," to the ",(0,o.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp6-key-manager#execute"},(0,o.kt)("inlineCode",{parentName:"a"},"execute(payload)"))," function on the KM."),(0,o.kt)("p",null,"Transferring LYX from a UP is as simple as making a standard ",(0,o.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permission-values"},(0,o.kt)("inlineCode",{parentName:"a"},"CALL"))," to any ",(0,o.kt)("inlineCode",{parentName:"p"},"address"),", attaching some ",(0,o.kt)("strong",{parentName:"p"},"value")," to the call. You can transfer LYX from a UP via the ",(0,o.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp0-erc725-account"},(0,o.kt)("inlineCode",{parentName:"a"},"execute(...)"))," function in the UP contract."),(0,o.kt)("p",null,"The parameters of the function will be as follow:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_operation"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"0")," (for ",(0,o.kt)("inlineCode",{parentName:"li"},"CALL"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_to"),": the ",(0,o.kt)("inlineCode",{parentName:"li"},"address")," we want to send LYX to (Externally Owned Account or contract address)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_value"),": the amount of LYX we want to transfer (in Wei)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_data"),": empty payload (",(0,o.kt)("inlineCode",{parentName:"li"},"0x"),")")),(0,o.kt)("p",null,"Since we are just making a simple LYX transfer, the fourth parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"_data")," will be empty."),(0,o.kt)("h2",{id:"step-1-create-the-contract-instances"},"Step 1: create the contract instances"),(0,o.kt)("p",null,"We will first need to create the instance of each contract. To do so we will need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"contracts abis"),(0,o.kt)("li",{parentName:"ul"},"address of our Universal Profile"),(0,o.kt)("li",{parentName:"ul"},"address of our KeyManager")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const UniversalProfile = require('@lukso/universalprofile-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/universalprofile-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\nconst myKM = new web3.eth.Contract(KeyManager.abi, myURDAddress);\n")),(0,o.kt)("h2",{id:"step-2-encode-the-payload-to-transfer-lyx"},"Step 2: Encode the payload to transfer LYX"),(0,o.kt)("p",null,"The next step is to encode the action that we will perform on our Universal Profile. In our case, we want to transfer 3 LYX to an address, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute(...)")," function on the UP."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3');\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n")),(0,o.kt)("h2",{id:"step-3-send-the-payload-to-the-key-manager"},"Step 3: send the payload to the Key Manager"),(0,o.kt)("p",null,"The final step is to pass the encoded LYX transfer function to the Key Manager. Since we are calling from the UP's owner address, the Key Manager will authorize, and execute the LYX transfer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await myKM\n  .execute(transferLYXPayload)\n  .send({ from: wallet.address, gasLimit: 300_000 });\n")),(0,o.kt)("h2",{id:"final-code"},"Final Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Web3 = require('web3');\nconst UniversalProfile = require('@lukso/universalprofile-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/universalprofile-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\n// 1. instantiate your contracts\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\nconst myKM = new web3.eth.Contract(KeyManager.abi, myURDAddress);\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3');\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// 2. encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n\n// 3. execute the LYX transfer via the Key Manager\nawait myKM\n  .execute(transferLYXPayload)\n  .send({ from: wallet.address, gasLimit: 300_00 });\n")))}p.isMDXComponent=!0}}]);