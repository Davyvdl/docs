"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[3607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||s;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_label:"Check if an address is a UP"},i="How to check if an address is a Universal Profile?",o={unversionedId:"guides/universal-profile/check-if-address-is-universal-profile",id:"guides/universal-profile/check-if-address-is-universal-profile",title:"How to check if an address is a Universal Profile?",description:"You may want to read the Standard Detection page first.",source:"@site/docs/guides/universal-profile/check-if-address-is-universal-profile.md",sourceDirName:"guides/universal-profile",slug:"/guides/universal-profile/check-if-address-is-universal-profile",permalink:"/guides/universal-profile/check-if-address-is-universal-profile",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-profile/check-if-address-is-universal-profile.md",tags:[],version:"current",lastUpdatedAt:1667294170,formattedLastUpdatedAt:"Nov 1, 2022",frontMatter:{sidebar_label:"Check if an address is a UP"},sidebar:"guidesSidebar",previous:{title:"Interact with Contracts",permalink:"/guides/universal-profile/interact-with-contracts"}},c={},l=[{value:"1) Check address format",id:"1-check-address-format",level:2},{value:"2) Check the contract supports the <code>LSP0ERC725Account</code> interface using ERC165",id:"2-check-the-contract-supports-the-lsp0erc725account-interface-using-erc165",level:2},{value:"3) Check supported standard",id:"3-check-supported-standard",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-check-if-an-address-is-a-universal-profile"},"How to check if an address is a Universal Profile?"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You may want to read the ",(0,a.kt)("a",{parentName:"p",href:"/standards/standard-detection"},"Standard Detection")," page first.")),(0,a.kt)("p",null,"To check if an address is a ",(0,a.kt)("a",{parentName:"p",href:"/standards/universal-profile/introduction"},"Universal Profile")," we need to perform 3 checks:"),(0,a.kt)("h2",{id:"1-check-address-format"},"1) Check address format"),(0,a.kt)("p",null,"This first basic test can be performed via regular expression or 3rd party library function. For example this is how we can achieve this using Web3js ",(0,a.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en/v1.2.11/web3-utils.html#isaddress"},(0,a.kt)("inlineCode",{parentName:"a"},"isAddress")),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { isAddress } from 'web3-utils';\n\nif (!isAddress(address)) {\n  throw new Error('Invalid address');\n}\n")),(0,a.kt)("h2",{id:"2-check-the-contract-supports-the-lsp0erc725account-interface-using-erc165"},"2) Check the contract supports the ",(0,a.kt)("inlineCode",{parentName:"h2"},"LSP0ERC725Account")," interface using ERC165"),(0,a.kt)("p",null,"This is next check that makes sure we deal with a smart contract that supports the ",(0,a.kt)("inlineCode",{parentName:"p"},"LSP0ERC725Account")," interface (",(0,a.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"EIP-165"),"). For this we need to set ",(0,a.kt)("inlineCode",{parentName:"p"},"Contract")," instance and call ",(0,a.kt)("inlineCode",{parentName:"p"},"supportsInterface")," method."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"EIP-165 supportsInterface ABI"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const eip165ABI = [\n  {\n    type: 'function',\n    stateMutability: 'view',\n    outputs: [\n      {\n        type: 'bool',\n        name: '',\n        internalType: 'bool',\n      },\n    ],\n    name: 'supportsInterface',\n    inputs: [\n      {\n        type: 'bytes4',\n        name: 'interfaceId',\n        internalType: 'bytes4',\n      },\n    ],\n  },\n];\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const eip165Contract = new web3.Contract(eip165ABI, address);\n\nconst interfaceId = '0xeb6be62e'; // Can be found here: https://docs.lukso.tech/standards/smart-contracts/interface-ids\n\nawait eip165Contract.methods.supportsInterface(interfaceId).call();\n// true or false -> if false, this address is not a Universal Profile.\n")),(0,a.kt)("h2",{id:"3-check-supported-standard"},"3) Check supported standard"),(0,a.kt)("p",null,"Last but not least we should perform a check over ",(0,a.kt)("inlineCode",{parentName:"p"},"LSP3UniversalProfile")," standard. For this we need to call ",(0,a.kt)("inlineCode",{parentName:"p"},"getData")," on the ",(0,a.kt)("inlineCode",{parentName:"p"},"SupportedStandards:LSP3UniversalProfile")," key."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"getData ABI"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// This ABI can also be imported from @lukso/lsp-smart-contracts npm package\n\nconst getDataABI = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'dataKey',\n        type: 'bytes32',\n      },\n    ],\n    name: 'getData',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: 'dataValue',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {INTERFACE_IDS, SupportedStandards} from '@lukso/lsp-smart-contracts/constants';\n\nconst contract = new web3.Contract(getDataABI, address);\n\nconst supportedStandard = await contract.methods['getData(bytes32)'](SupportedStandards.LSP3UniversalProfile.key).call();\n\nif (supportedStandard !== SupportedStandards.LSP3UniversalProfile.value) {\n  throw new Error('Address does not support LSP3UniversalProfile standard');\n}\n")))}d.isMDXComponent=!0}}]);