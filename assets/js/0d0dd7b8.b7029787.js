"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[6173],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9564:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_label:"Execute Relay Call",sidebar_position:2},i="Execute Relay Call",s={unversionedId:"guides/key-manager/execute-relay-call",id:"guides/key-manager/execute-relay-call",title:"Execute Relay Call",description:"The LSP6 KeyManager standard enables anybody to execute a transaction on behalf of a Universal Profile, given they have a valid transaction which has been signed by a key that controls the Universal Profile.",source:"@site/docs/guides/key-manager/execute-relay-call.md",sourceDirName:"guides/key-manager",slug:"/guides/key-manager/execute-relay-call",permalink:"/guides/key-manager/execute-relay-call",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/key-manager/execute-relay-call.md",tags:[],version:"current",lastUpdatedAt:1657886200,formattedLastUpdatedAt:"7/15/2022",sidebarPosition:2,frontMatter:{sidebar_label:"Execute Relay Call",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Grant Permissions to 3rd parties",permalink:"/guides/key-manager/give-permissions"},next:{title:"Create an LSP7 Digital Asset (Token)",permalink:"/guides/digital-assets/create-lsp7-digital-asset"}},l={},c=[{value:"Generate the Signed Transaction Payload",id:"generate-the-signed-transaction-payload",level:2},{value:"Execute via <code>executeRelayCall</code>",id:"execute-via-executerelaycall",level:2}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"execute-relay-call"},"Execute Relay Call"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"LSP6 KeyManager")," standard enables anybody to execute a transaction on behalf of a Universal Profile, given they have a valid transaction which has been signed by a key that controls the Universal Profile."),(0,r.kt)("p",null,"Relayed execution enables use cases such as Transaction Relayer Services to be possible where users can send their transaction details to a third party to be executed, moving the gas cost burden away from the user who owns the Universal Profile."),(0,r.kt)("p",null,"For example, Alice can send an encoded transaction which updates the ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp3-universal-profile-metadata"},"LSP3Profile")," picture on her Universal Profile to a second user, Bob, who executes the transaction and pays the gas cost of the transaction on behalf of Alice."),(0,r.kt)("p",null,"To execute the transaction, Bob needs to know:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the encoded ABI of the transaction that will get executed,"),(0,r.kt)("li",{parentName:"ul"},"the transaction signature,"),(0,r.kt)("li",{parentName:"ul"},"the nonce of the key that signed the transaction.")),(0,r.kt)("p",null,"The transaction is then executed via the ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"LSP6KeyManager")," function ",(0,r.kt)("inlineCode",{parentName:"p"},"executeRelayCall"),"."),(0,r.kt)("h2",{id:"generate-the-signed-transaction-payload"},"Generate the Signed Transaction Payload"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This example shows how to prepare a transaction to be executed by a third party. This logic can be implemented client-side and then sent to a third-party application or service such as a Transaction Relay service to be executed."))),(0,r.kt)("p",null,"To encode a transaction, we need the address of the Universal Profile smart contract and the private key of a controller key with sufficient ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},"LSP6 permissions")," to execute the transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const controllingAccountPrivateKey = '0x...';\nconst myUpAddress = '0x...';\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," of the controller key from the KeyManager by instantiating the KeyManager smart contract instance and calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"getNonce")," function."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"channelId")," is used to prevent nonce conflicts when multiple apps send transactions to the same KeyManager at the same time. Read more about ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#out-of-order-execution"},"out of order execution here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Get the controller key nonce"',title:'"Get',the:!0,controller:!0,key:!0,'nonce"':!0},"import UniversalProfileContract from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\n\nconst myUniversalProfile = new web3.eth.Contract(\n  UniversalProfileContract.abi,\n  myUpAddress,\n);\n\nconst keyManagerAddress = await myUniversalProfile.methods.owner().call();\nconst KeyManager = new web3.eth.Contract(\n  KeyManagerContract.abi,\n  keyManagerAddress,\n);\n\nconst controllerAccount =\n  web3.eth.accounts.privateKeyToAccount(controllerPrivateKey);\nconst channelId = 0;\n\nconst nonce = await KeyManager.methods\n  .getNonce(controllerAccount.address, channelId)\n  .call();\n")),(0,r.kt)("p",null,"Encode the ABI of the transaction you want to be executed. In this case, an LYX transfer to a recipient address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Encode transaction ABI"',title:'"Encode',transaction:!0,'ABI"':!0},"const abiPayload = myUniversalProfile.methods.execute(\n    0,\n    '0x...', // Recipient address\n    web3.utils.toWei('1'),\n    '0x'\n).encodeABI()) ;\n")),(0,r.kt)("p",null,"Afterward, sign the transaction message from the controller key of the Universal Profile."),(0,r.kt)("p",null,"The message is constructed by signing the ",(0,r.kt)("inlineCode",{parentName:"p"},"chainId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keyManagerAddress"),", signer ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"abiPayload"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Sign the transaction"',title:'"Sign',the:!0,'transaction"':!0},"const chainId = await web3.eth.getChainId(); // will be 2828 on l16\n\nconst message = web3.utils.soliditySha3(chainId, keyManagerAddress, nonce, {\n  t: 'bytes',\n  v: abiPayload,\n});\n\nconst signatureObject = controllerAccount.sign(message);\nconst signature = signatureObject.signature;\n")),(0,r.kt)("p",null,"Now the ",(0,r.kt)("inlineCode",{parentName:"p"},"signature"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"abiPayload"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"keyManagerAddress")," can be sent to a third party to execute the transaction using ",(0,r.kt)("inlineCode",{parentName:"p"},"executeRelayCall"),"."),(0,r.kt)("h2",{id:"execute-via-executerelaycall"},"Execute via ",(0,r.kt)("inlineCode",{parentName:"h2"},"executeRelayCall")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This example shows how a third party can execute a transaction on behalf of another user."))),(0,r.kt)("p",null,"To execute a signed transaction ABI payload requires the ",(0,r.kt)("strong",{parentName:"p"},"KeyManager contract address"),", the ",(0,r.kt)("strong",{parentName:"p"},"transaction ABI payload"),", ",(0,r.kt)("strong",{parentName:"p"},"signed transaction payload")," and ",(0,r.kt)("strong",{parentName:"p"},"nonce")," of the controller key which signed the transaction."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To get the KeyManager address from the UniversalProfile address, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"owner")," function on the Universal Profile contract."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\n\nconst KeyManager = new web3.eth.Contract(\n  KeyManagerContract.abi,\n  keyManagerAddress,\n);\n\nconst executeRelayCallTransaction = await keyManager.methods\n  .executeRelayCall(signature, signerNonce, transactionPayloadAbi)\n  .send();\n")))}p.isMDXComponent=!0}}]);