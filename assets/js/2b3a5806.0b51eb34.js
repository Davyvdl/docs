"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[1460],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(d,".").concat(m)]||u[m]||l[m]||i;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1972:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),s=["components"],o={title:"Standard Detection",sidebar_position:2},d="Standard Detection",p={unversionedId:"standards/standard-detection",id:"standards/standard-detection",title:"Standard Detection",description:"The InterfaceId and the SupportedStandards:XYZ key is not the most secure way to check for a standard, as they could be set manually.",source:"@site/docs/standards/standard-detection.md",sourceDirName:"standards",slug:"/standards/standard-detection",permalink:"/standards/standard-detection",editUrl:"https://github.com/lukso-network/docs/tree/main/docs/standards/standard-detection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Standard Detection",sidebar_position:2},sidebar:"standardsSidebar",previous:{title:"Introduction",permalink:"/standards/introduction"},next:{title:"LSP1 - Universal Receiver",permalink:"/standards/generic-standards/lsp1-universal-receiver"}},c=[{value:"Difference between InterfaceId VS SupportedStandard Key",id:"difference-between-interfaceid-vs-supportedstandard-key",children:[{value:"Example",id:"example",children:[],level:3}],level:2}],l={toc:c};function u(e){var t=e.components,o=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"standard-detection"},"Standard Detection"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("strong",{parentName:"p"},"InterfaceId")," and the ",(0,i.kt)("strong",{parentName:"p"},"SupportedStandards:XYZ")," key is not the most secure way to check for a standard, as they could be set manually."))),(0,i.kt)("p",null,"There are 2 types of standards at ",(0,i.kt)("strong",{parentName:"p"},"LUKSO"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Interface Standards"),": Where we standardize a set of functions. i.e: ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},"LSP0-ERC725Account"),", ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"LSP6-KeyManager"),", ",(0,i.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP7-Digital-Asset"},"LSP7-DigitalAsset"),", etc ..")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Metadata Standards"),": Where we standardize a set of ERC725Y keys. i.e: ",(0,i.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp3-universal-profile-metadata"},"LSP3-UniversalProfile-Metadata"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-4-DigitalAsset-Metadata.md"},"LSP4-DigitalAsset-Metadata"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-10-ReceivedVaults.md"},"LSP10ReceivedVaults"),", etc .."))),(0,i.kt)("h2",{id:"difference-between-interfaceid-vs-supportedstandard-key"},"Difference between InterfaceId VS SupportedStandard Key"),(0,i.kt)("p",null,"Checking the ",(0,i.kt)("strong",{parentName:"p"},"InterfaceId")," for a contract using ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC165 standard")," is equal for checking if the contract is implementing a set of functions. As for checking for the ",(0,i.kt)("strong",{parentName:"p"},"SupportedStandards:XYZ")," ERC725Y key, it's equal for checking if the contract is implementing ",(0,i.kt)("strong",{parentName:"p"},"XYZ")," related ERC725Y Keys."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Interface and metadata standards",src:n(2891).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UniversalProfile")," contract supports ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./smart-contracts/interface-ids"},"ERC725Account InterfaceId")),", this means that the contract ",(0,i.kt)("strong",{parentName:"p"},"SHOULD")," implement functions like ",(0,i.kt)("inlineCode",{parentName:"p"},"getData"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setData"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"execute"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"universalReceiver"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isValidSignature")," .",(0,i.kt)("br",{parentName:"p"}),"\n","Also it implements the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./universal-profile/lsp3-universal-profile-metadata#supportedstandardslsp3universalprofile"},"SupportedStandards:LSP3UniversalProfile"))," key, this means that the contract ",(0,i.kt)("strong",{parentName:"p"},"SHOULD")," implement ERC725Y keys like ",(0,i.kt)("inlineCode",{parentName:"p"},"LSP1UniversalReceiver"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LSP3IssuedAssets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LSP5ReceivedAssets"),", etc .."))}u.isMDXComponent=!0},2891:function(e,t,n){t.Z=n.p+"assets/images/standard-detection-dafe387cab476e81d7a9858e19b9c88a.jpeg"}}]);