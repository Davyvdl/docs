"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7389],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),d=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||s;return a?n.createElement(f,l(l({ref:t},c),{},{components:a})):n.createElement(f,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<s;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>C});var n=a(7462),r=a(7294),s=a(6010),l=a(2466),o=a(6775),i=a(1980),d=a(7392),c=a(12);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,s=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[i,d]=f({queryString:a,groupId:n}),[u,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:n}),y=(()=>{const e=i??u;return m({value:e,tabValues:s})?e:null})();(0,r.useEffect)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),h(e)}),[d,h,s]),tabValues:s}}var y=a(2389);const g="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:t,block:a,selectedValue:o,selectValue:i,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),p=e=>{const t=e.currentTarget,a=c.indexOf(t),n=d[a].value;n!==o&&(u(t),i(n))},m=e=>{var t;let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},t)},d.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,s.Z)("tabs__item",b,null==l?void 0:l.className,{"tabs__item--active":o===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:n}=e;if(t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",g)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function C(e){const t=(0,y.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},4693:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),s=a(4866),l=a(5162);const o={sidebar_label:"Restrict Addresses to Vaults",sidebar_position:4},i="Restrict Addresses to Vaults",d={unversionedId:"guides/vault/restrict-addresses-to-vaults",id:"guides/vault/restrict-addresses-to-vaults",title:"Restrict Addresses to Vaults",description:"As mentioned in the first Vault guide, the Vault can be used to restrict different addresses (protocols, other devices, etc..) to execute and set data on it instead of doing it directly on the Universal Profile.",source:"@site/docs/guides/vault/restrict-addresses-to-vaults.md",sourceDirName:"guides/vault",slug:"/guides/vault/restrict-addresses-to-vaults",permalink:"/guides/vault/restrict-addresses-to-vaults",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/restrict-addresses-to-vaults.md",tags:[],version:"current",lastUpdatedAt:1676928077,formattedLastUpdatedAt:"Feb 20, 2023",sidebarPosition:4,frontMatter:{sidebar_label:"Restrict Addresses to Vaults",sidebar_position:4},sidebar:"guidesSidebar",previous:{title:"Interact With Contracts",permalink:"/guides/vault/interact-with-contracts"},next:{title:"Create a Universal Profile",permalink:"/guides/universal-profile/create-profile"}},c={},u=[{value:"Granting Permission to 3rd Parties",id:"granting-permission-to-3rd-parties",level:2},{value:"Use AllowedCalls permission for the 3rd Parties",id:"use-allowedcalls-permission-for-the-3rd-parties",level:2},{value:"Setup",id:"setup",level:2},{value:"Step 1 - Imports, Constants &amp; EOA",id:"step-1---imports-constants--eoa",level:2},{value:"Step 2 - Create contract instances",id:"step-2---create-contract-instances",level:2},{value:"Step 3 - Encode the calldata for encoding <code>AllowedCalls</code>",id:"step-3---encode-the-calldata-for-encoding-allowedcalls",level:2},{value:"Step 4 - Execute via the Key Manager",id:"step-4---execute-via-the-key-manager",level:2},{value:"Final code",id:"final-code",level:2}],p={toc:u};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"restrict-addresses-to-vaults"},"Restrict Addresses to Vaults"),(0,r.kt)("p",null,"As mentioned in the ",(0,r.kt)("a",{parentName:"p",href:"/guides/vault/create-a-vault"},"first Vault guide"),", the ",(0,r.kt)("strong",{parentName:"p"},"Vault")," can be used to restrict different addresses (protocols, other devices, etc..) to execute and set data on it instead of doing it directly on the Universal Profile."),(0,r.kt)("p",null,"This way, when ",(0,r.kt)("strong",{parentName:"p"},"granting a third party permissions")," to execute through your profile, this third party will only be able to interact with the Vault, and all the other assets will be safe."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guide - Restrict addresses to an LSP9Vault",src:a(7360).Z,width:"2762",height:"1448"})),(0,r.kt)("h2",{id:"granting-permission-to-3rd-parties"},"Granting Permission to 3rd Parties"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Make sure not to grant the 3rd party address the ",(0,r.kt)("strong",{parentName:"p"},"SUPER Permissions"),". Otherwise, the ",(0,r.kt)("strong",{parentName:"p"},"AllowedCalls restriction")," will not work.")),(0,r.kt)("p",null,"Check the guide of ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/key-manager/give-permissions"},"granting permissions to 3rd Parties")),", and make sure to grant the 3rd party address the ",(0,r.kt)("strong",{parentName:"p"},"CALL Permission"),"."),(0,r.kt)("h2",{id:"use-allowedcalls-permission-for-the-3rd-parties"},"Use AllowedCalls permission for the 3rd Parties"),(0,r.kt)("p",null,"In this guide, after granting the 3rd party the permission ",(0,r.kt)("strong",{parentName:"p"},"CALL"),", we will need to ",(0,r.kt)("strong",{parentName:"p"},"allow the address of the 3rd party")," to interact with the ",(0,r.kt)("strong",{parentName:"p"},"Vault address"),". We will be using the ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#allowed-calls"},"AllowedCalls permission")," from the Key Manager."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can use either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},"You MUST install ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))),(0,r.kt)("li",{parentName:"ul"},"You SHOULD install ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ERC725Alliance/erc725.js"},(0,r.kt)("inlineCode",{parentName:"a"},"@erc725/erc725.js")))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts @erc725/erc725.js\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts @erc725/erc725.js\n")))),(0,r.kt)("h2",{id:"step-1---imports-constants--eoa"},"Step 1 - Imports, Constants & EOA"),(0,r.kt)("p",null,"For this guide we will firstly need and import the ",(0,r.kt)("em",{parentName:"p"},"ABIs")," for the Universal Profile & Key Manager contracts. Also we will import the ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC725YDataKeys")," to retrieve the data key for ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#allowed-calls"},"AllowedCalls permission"),".",(0,r.kt)("br",{parentName:"p"}),"\n","As constants we will need to store the addresses for the Universal Profile, Vault & the restricted third party.",(0,r.kt)("br",{parentName:"p"}),"\n","Finally, we will need a private key with the proper ",(0,r.kt)("em",{parentName:"p"},"permissions"),", in our case ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"ADDCONTROLLER permission")),"."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA initialization"',title:'"Imports,',Constants:!0,"&":!0,EOA:!0,'initialization"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // address of the UP\nconst vaultAddress = '0x..'; // address of the Vault\nconst thirdPartyAddress = '0x..'; // address of the third party you want to restrict\n\n// setup your EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA initialization"',title:'"Imports,',Constants:!0,"&":!0,EOA:!0,'initialization"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // address of the UP\nconst vaultAddress = '0x..'; // address of the Vault\nconst thirdPartyAddress = '0x..'; // address of the third party you want to restrict\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h2",{id:"step-2---create-contract-instances"},"Step 2 - Create contract instances"),(0,r.kt)("p",null,"At this point we will create instances for the following contracts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp0-erc725account"},(0,r.kt)("strong",{parentName:"a"},"Universal Profile"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp6-key-manager"},(0,r.kt)("strong",{parentName:"a"},"Key Manager")))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Universal Profile & Key Manager contract instances"',title:'"Universal',Profile:!0,"&":!0,Key:!0,Manager:!0,contract:!0,'instances"':!0},"// create an instance of the UP\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// getting the Key Manager address from UP\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// create an instance of the KeyManager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Universal Profile & Key Manager contract instances"',title:'"Universal',Profile:!0,"&":!0,Key:!0,Manager:!0,contract:!0,'instances"':!0},"// create an instance of the UP\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n\n// getting the Key Manager address from UP\nconst keyManagerAddress = await universalProfile.owner();\n// create an instance of the KeyManager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,r.kt)("h2",{id:"step-3---encode-the-calldata-for-encoding-allowedcalls"},"Step 3 - Encode the calldata for encoding ",(0,r.kt)("a",{parentName:"h2",href:"/standards/universal-profile/lsp6-key-manager#allowed-calls"},(0,r.kt)("inlineCode",{parentName:"a"},"AllowedCalls"))),(0,r.kt)("p",null,"Now we need to encode the ",(0,r.kt)("strong",{parentName:"p"},"Allowed Calls")," that we want for the ",(0,r.kt)("em",{parentName:"p"},"Third Party address"),". After we do that, we will encode a calldata that will update the ",(0,r.kt)("em",{parentName:"p"},"Allowed Calls data key")," with the encoded ",(0,r.kt)("strong",{parentName:"p"},"Allowed Calls")),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata that will update the Allowed Calls of a Controller address"',title:'"Calldata',that:!0,will:!0,update:!0,the:!0,Allowed:!0,Calls:!0,of:!0,a:!0,Controller:!0,'address"':!0},"const allowedCallsDataKey = // constructing the data key of allowed addresses\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // of the 3rd party\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// encode setData calldata on the UP\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](allowedCallsDataKey, allowedCallsDataValue).encodeABI();\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata that will update the Allowed Calls of a Controller address"',title:'"Calldata',that:!0,will:!0,update:!0,the:!0,Allowed:!0,Calls:!0,of:!0,a:!0,Controller:!0,'address"':!0},"const allowedCallsDataKey = // constructing the data key of allowed addresses\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // of the 3rd party\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// encode setData calldata on the UP\nconst setDataCalldata = universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [allowedCallsDataKey, allowedCallsDataValue],\n);\n")))),(0,r.kt)("h2",{id:"step-4---execute-via-the-key-manager"},"Step 4 - Execute via the Key Manager"),(0,r.kt)("p",null,"Finally we will send a transaction that will execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"setData(...)")," calldata on the Universal Profile via the Key Manager."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction to be executed in the Universal profile contract via the Key Manager"',title:'"Send',transaction:!0,to:!0,be:!0,executed:!0,in:!0,the:!0,Universal:!0,profile:!0,contract:!0,via:!0,Key:!0,'Manager"':!0},"// execute the setDataCalldata on the Key Manager\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction to be executed in the Universal Profile contract via the Key Manager"',title:'"Send',transaction:!0,to:!0,be:!0,executed:!0,in:!0,the:!0,Universal:!0,Profile:!0,contract:!0,via:!0,Key:!0,'Manager"':!0},"// execute the setDataCalldata on the Key Manager\nawait myKM.connect(myEOA)['execute(bytes)'](setDataCalldata);\n")))),(0,r.kt)("h2",{id:"final-code"},"Final code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setting Allowed Addresses for the 3rd party address"',title:'"Setting',Allowed:!0,Addresses:!0,for:!0,the:!0,"3rd":!0,party:!0,'address"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // address of the UP\nconst vaultAddress = '0x..'; // address of the Vault\nconst thirdPartyAddress = '0x..'; // address of the third party you want to restrict\n\n// setup your EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n\n// create an instance of the UP\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// getting the Key Manager address from UP\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// create an instance of the KeyManager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n\nconst allowedCallsDataKey = // constructing the data key of allowed addresses\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // of the 3rd party\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// encode setData calldata on the UP\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](allowedCallsDataKey, allowedCallsDataValue).encodeABI();\n\n// execute the setDataCalldata on the Key Manager\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setting Allowed Addresses for the 3rd party address"',title:'"Setting',Allowed:!0,Addresses:!0,for:!0,the:!0,"3rd":!0,party:!0,'address"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // address of the UP\nconst vaultAddress = '0x..'; // address of the Vault\nconst thirdPartyAddress = '0x..'; // address of the third party you want to restrict\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\n// create an instance of the UP\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n\n// getting the Key Manager address from UP\nconst keyManagerAddress = await universalProfile.owner();\n// create an instance of the KeyManager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\nconst allowedCallsDataKey = // constructing the data key of allowed addresses\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // of the 3rd party\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// encode setData calldata on the UP\nconst setDataCalldata = universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [allowedCallsDataKey, allowedCallsDataValue],\n);\n\n// execute the setDataCalldata on the Key Manager\nawait myKM.connect(myEOA)['execute(bytes)'](setDataCalldata);\n")))))}m.isMDXComponent=!0},7360:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/restrict-protocol-to-vault-5430220f8c3675f005ba9acb6bacc12e.jpeg"}}]);