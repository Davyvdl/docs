"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[3736],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=s,h=p["".concat(o,".").concat(m)]||p[m]||u[m]||r;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function m(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),s=a(6010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>D});var n=a(7462),s=a(7294),r=a(6010),i=a(2466),l=a(6775),o=a(1980),d=a(7392),c=a(12);function u(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:s}}=e;return{value:t,label:a,attributes:n,default:s}}))}function p(e){const{values:t,children:a}=e;return(0,s.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function v(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=p(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[o,d]=h({queryString:a,groupId:n}),[u,v]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,c.Nk)(a);return[n,(0,s.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),f=(()=>{const e=o??u;return m({value:e,tabValues:r})?e:null})();(0,s.useEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),v(e)}),[d,v,r]),tabValues:r}}var f=a(2389);const y="tabList__CuJ",g="tabItem_LNqP";function P(e){let{className:t,block:a,selectedValue:l,selectValue:o,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),p=e=>{const t=e.currentTarget,a=c.indexOf(t),n=d[a].value;n!==l&&(u(t),o(n))},m=e=>{var t;let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}null==(t=a)||t.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},d.map((e=>{let{value:t,label:a,attributes:i}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},i,{className:(0,r.Z)("tabs__item",g,null==i?void 0:i.className,{"tabs__item--active":l===t})}),a??t)})))}function U(e){let{lazy:t,children:a,selectedValue:n}=e;if(t){const e=a.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function b(e){const t=v(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",y)},s.createElement(P,(0,n.Z)({},e,t)),s.createElement(U,(0,n.Z)({},e,t)))}function D(e){const t=(0,f.Z)();return s.createElement(b,(0,n.Z)({key:String(t)},e))}},4837:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var n=a(7462),s=(a(7294),a(3905)),r=a(4866),i=a(5162);const l={sidebar_label:"Set the default implementation",sidebar_position:1},o="Set the default implementation",d={unversionedId:"guides/universal-receiver-delegate/set-default-implementation",id:"guides/universal-receiver-delegate/set-default-implementation",title:"Set the default implementation",description:"Users deploying their Universal Profiles using the guides that utilize lsp-factory or the Browser Extension can skip this guide, as this contract is already deployed and set for their profiles.",source:"@site/docs/guides/universal-receiver-delegate/set-default-implementation.md",sourceDirName:"guides/universal-receiver-delegate",slug:"/guides/universal-receiver-delegate/set-default-implementation",permalink:"/guides/universal-receiver-delegate/set-default-implementation",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-receiver-delegate/set-default-implementation.md",tags:[],version:"current",lastUpdatedAt:1676681130,formattedLastUpdatedAt:"Feb 18, 2023",sidebarPosition:1,frontMatter:{sidebar_label:"Set the default implementation",sidebar_position:1},sidebar:"guidesSidebar",previous:{title:"Upgrade LSP6 Key Manager",permalink:"/guides/key-manager/upgrade-lsp6"},next:{title:"Accept & Reject Assets",permalink:"/guides/universal-receiver-delegate/accept-reject-assets"}},c={},u=[{value:"Setup",id:"setup",level:2},{value:"Step 1 - Imports, constants and EOA",id:"step-1---imports-constants-and-eoa",level:2},{value:"Step 2 - Deploy the default Universal Receiver Delegate contract",id:"step-2---deploy-the-default-universal-receiver-delegate-contract",level:2},{value:"Create a contract instance",id:"create-a-contract-instance",level:3},{value:"Send the contract deployment transaction",id:"send-the-contract-deployment-transaction",level:3},{value:"Final code",id:"final-code",level:3},{value:"Step 3 - Set the address of the URD in the storage",id:"step-3---set-the-address-of-the-urd-in-the-storage",level:2},{value:"Create the contract instances",id:"create-the-contract-instances",level:3},{value:"Register URD on the UP + set the URD permissions",id:"register-urd-on-the-up--set-the-urd-permissions",level:3},{value:"Encode <code>setData(..)</code> calldata",id:"encode-setdata-calldata",level:3},{value:"Send transaction via Key Manager",id:"send-transaction-via-key-manager",level:3},{value:"Final code",id:"final-code-1",level:3},{value:"Final code - Deploy &amp; Update",id:"final-code---deploy--update",level:2}],p={toc:u};function m(e){let{components:t,...l}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"set-the-default-implementation"},"Set the default implementation"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Users deploying their Universal Profiles using the guides that utilize ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/guides/universal-profile/create-profile"},"lsp-factory"))," or the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/guides/browser-extension/create-a-universal-profile"},"Browser Extension"))," can skip this guide, as this contract is already deployed and set for their profiles.")),(0,s.kt)("p",null,"This guide will teach you how to deploy and set the default implementation of the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/standards/smart-contracts/lsp1-universal-receiver-delegate-up"},"Universal Receiver Delegate"))," (URD) used by the Universal Profile. This contract will register the addresses of the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp5-received-assets"},"received assets"))," and ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp10-received-vaults"},"vaults"))," and will remove them on a balance equal to 0. This contract requires the ",(0,s.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"SUPER_SETDATA")," Permission"))," to interact with the profile through the KeyManager."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"UniversalReceiverDelegate setting data keys on profile",src:a(1704).Z,width:"1410",height:"610"})),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Either ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,s.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,s.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,s.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,s.kt)("h2",{id:"step-1---imports-constants-and-eoa"},"Step 1 - Imports, constants and EOA"),(0,s.kt)("p",null,"For beginners we need to get the ",(0,s.kt)("em",{parentName:"p"},"ABIs")," of the contracts that we will use and the ",(0,s.kt)("em",{parentName:"p"},"bytecode")," of the ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP1UniversalReceiverDelegateUP"),".",(0,s.kt)("br",{parentName:"p"}),"\n","After that we need to store the address of our Universal Profile.",(0,s.kt)("br",{parentName:"p"}),"\n","Then we will initialize the EOA that we will further use."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,s.kt)("h2",{id:"step-2---deploy-the-default-universal-receiver-delegate-contract"},"Step 2 - Deploy the default Universal Receiver Delegate contract"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("strong",{parentName:"p"},"Universal Profile")," and the ",(0,s.kt)("strong",{parentName:"p"},"Vault")," don't use the same implementation of the Universal Receiver Delegate.")),(0,s.kt)("h3",{id:"create-a-contract-instance"},"Create a contract instance"),(0,s.kt)("p",null,"At this step we will create an instance of the Universal profile URD that we will further be used to deploy one."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance of the Universal Profile URD"',title:'"Contract',instance:!0,of:!0,the:!0,Universal:!0,Profile:!0,'URD"':!0},"// create an instance of the LSP1UniversalReceiverDelegateUP\nlet universalProfileURD = new web3.eth.Contract(\n  LSP1UniversalReceiverDelegateUP.abi,\n);\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance of the Universal Profile URD"',title:'"Contract',instance:!0,of:!0,the:!0,Universal:!0,Profile:!0,'URD"':!0},"// create a LSP1UniversalReceiverDelegateUP Contract Factory\nlet universalProfileURDFactory = new ethers.ContractFactory(\n  LSP1UniversalReceiverDelegateUP.abi,\n  LSP1UniversalReceiverDelegateUP.bytecode,\n);\n")))),(0,s.kt)("h3",{id:"send-the-contract-deployment-transaction"},"Send the contract deployment transaction"),(0,s.kt)("p",null,"Send the deployment transaction to get a newly deployed URD."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send the transaction for deploying a new Universal Profile URD"',title:'"Send',the:!0,transaction:!0,for:!0,deploying:!0,a:!0,new:!0,Universal:!0,Profile:!0,'URD"':!0},"// deploy the Universal Receiver Delegate UP contract\nawait universalProfileURD\n  .deploy({\n    data: LSP1UniversalReceiverDelegateUP.bytecode,\n  })\n  .send({\n    from: EOA.address,\n    gas: 5_000_000,\n    gasPrice: '1000000000',\n  });\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send the transaction for deploying a new Universal Profile URD"',title:'"Send',the:!0,transaction:!0,for:!0,deploying:!0,a:!0,new:!0,Universal:!0,Profile:!0,'URD"':!0},"// deploy the Universal Receiver Delegate UP contract\nconst universalProfileURD = await universalProfileURDFactory\n  .connect(EOA)\n  .deploy();\n")))),(0,s.kt)("h3",{id:"final-code"},"Final code"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a Universal Receiver Delegate for the Universal Profile"',title:'"Deploy',a:!0,Universal:!0,Receiver:!0,Delegate:!0,for:!0,the:!0,'Profile"':!0},"const deployUniversalProfileURD = async () => {\n  // create an instance of the LSP1UniversalReceiverDelegateUP\n  let universalProfileURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateUP.abi,\n  );\n\n  // deploy the Universal Receiver Delegate UP contract\n  const universalProfileURDAddress = await universalProfileURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateUP.bytecode,\n    })\n    .send({\n      from: EOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return universalProfileURDAddress;\n};\n\n// deploy a new Universal Profile URD and retrieve its address\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a Universal Receiver Delegate for the Universal Profile"',title:'"Deploy',a:!0,Universal:!0,Receiver:!0,Delegate:!0,for:!0,the:!0,'Profile"':!0},"const deployUniversalProfileURD = async () => {\n  // create a LSP1UniversalReceiverDelegateUP Contract Factory\n  let universalProfileURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateUP.abi,\n    LSP1UniversalReceiverDelegateUP.bytecode,\n  );\n\n  // deploy the Universal Receiver Delegate UP contract\n  const universalProfileURD = await universalProfileURDFactory\n    .connect(EOA)\n    .deploy();\n\n  return universalProfileURD.target;\n};\n\n// deploy a new Universal Profile URD and retrieve its address\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n")))),(0,s.kt)("h2",{id:"step-3---set-the-address-of-the-urd-in-the-storage"},"Step 3 - Set the address of the URD in the storage"),(0,s.kt)("p",null,"After deploying the contract, we need to set its address under the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/standards/generic-standards/lsp1-universal-receiver#extension"},"LSP1-UniversalReceiverDelegate Data Key"))," and grant it the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},"SUPER_SETDATA"))," permission."),(0,s.kt)("h3",{id:"create-the-contract-instances"},"Create the contract instances"),(0,s.kt)("p",null,"Firstly we need to create instances for the following contracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp0-erc725account"},(0,s.kt)("strong",{parentName:"a"},"Universal Profile"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp6-key-manager"},(0,s.kt)("strong",{parentName:"a"},"Key Manager")))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instances for the Universal Profile & Key Manager"',title:'"Contract',instances:!0,for:!0,the:!0,Universal:!0,Profile:!0,"&":!0,Key:!0,'Manager"':!0},"// create an instance of the Universal Profile\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// get the owner of the Universal Profile\n// in our case it should be the address of the Key Manager\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// create an instance of the Key Manager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instances for the Universal Profile & Key Manager"',title:'"Contract',instances:!0,for:!0,the:!0,Universal:!0,Profile:!0,"&":!0,Key:!0,'Manager"':!0},"// create an instance of the Universal Profile\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// get the owner of the Universal Profile\n// in our case it should be the address of the Key Manager\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// create an instance of the Key Manager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,s.kt)("h3",{id:"register-urd-on-the-up--set-the-urd-permissions"},"Register URD on the UP + set the URD permissions"),(0,s.kt)("p",null,"Generate ",(0,s.kt)("em",{parentName:"p"},"Data Keys & Values")," for ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp1-universal-receiver-delegate/#how-delegation-works"},(0,s.kt)("strong",{parentName:"a"},"adding a URD"))," to the Universal Profile and for granting ",(0,s.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,s.kt)("strong",{parentName:"a"},"SUPER_SETDATA"))," permission to the ",(0,s.kt)("strong",{parentName:"p"},"URD"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Encode Data Keys & Values for updating the URD and its permissions"',title:'"Encode',Data:!0,Keys:!0,"&":!0,Values:!0,for:!0,updating:!0,the:!0,URD:!0,and:!0,its:!0,'permissions"':!0},"const addressPermissionsOldArrayLengthHex = await myUP.methods[\n  'getData(bytes32)'\n](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\nconst addressPermissionsNewArrayLength =\n  web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\nconst addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n  web3.utils.numberToHex(addressPermissionsNewArrayLength),\n  64,\n);\n\n// bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\nconst newElementIndexInArrayHex = addressPermissionsOldArrayLengthHex.substring(\n  34,\n  66,\n);\n\nconst dataKeys = [\n  URD_DATA_KEY,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n    newElementIndexInArrayHex,\n  ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n    universalProfileURDAddress.substring(2),\n];\nconst dataValues = [\n  universalProfileURDAddress,\n  addressPermissionsNewArrayLengthHex,\n  universalProfileURDAddress,\n  PERMISSIONS.SUPER_SETDATA,\n];\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Encode Data Keys & Values for updating the URD and its permissions"',title:'"Encode',Data:!0,Keys:!0,"&":!0,Values:!0,for:!0,updating:!0,the:!0,URD:!0,and:!0,its:!0,'permissions"':!0},"const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n);\n\nconst addressPermissionsNewArrayLength =\n  ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\nconst addressPermissionsNewArrayLengthHex =\n  '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n// bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\nconst newElementIndexInArrayHex = addressPermissionsOldArrayLengthHex.substring(\n  34,\n  66,\n);\n\nconst dataKeys = [\n  URD_DATA_KEY,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n    newElementIndexInArrayHex,\n  ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n    universalProfileURDAddress.substring(2),\n];\nconst dataValues = [\n  universalProfileURDAddress,\n  addressPermissionsNewArrayLengthHex,\n  universalProfileURDAddress,\n  PERMISSIONS.SUPER_SETDATA,\n];\n")))),(0,s.kt)("h3",{id:"encode-setdata-calldata"},"Encode ",(0,s.kt)("inlineCode",{parentName:"h3"},"setData(..)")," calldata"),(0,s.kt)("p",null,"Encode a calldata for ",(0,s.kt)("inlineCode",{parentName:"p"},"setData(bytes32[],bytes[])")," using the ",(0,s.kt)("em",{parentName:"p"},"dataKeys")," & ",(0,s.kt)("em",{parentName:"p"},"dataValues")," generated in the ",(0,s.kt)("a",{parentName:"p",href:"#step-32---encode-new-permissions-data-keys--values"},(0,s.kt)("strong",{parentName:"a"},"step before")),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Encode a calldata that will updated the URD and its permissions"',title:'"Encode',a:!0,calldata:!0,that:!0,will:!0,updated:!0,the:!0,URD:!0,and:!0,its:!0,'permissions"':!0},"// encode setData Calldata on the Universal Profile\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32[],bytes[])'\n](dataKeys, dataValues).encodeABI();\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Encode a calldata that will updated the URD and its permissions"',title:'"Encode',a:!0,calldata:!0,that:!0,will:!0,updated:!0,the:!0,URD:!0,and:!0,its:!0,'permissions"':!0},"// encode setData Calldata on the Universal Profile\nconst setDataCalldata = await universalProfile.interface.encodeFunctionData(\n  'setData(bytes32[],bytes[])',\n  [dataKeys, dataValues],\n);\n")))),(0,s.kt)("h3",{id:"send-transaction-via-key-manager"},"Send transaction via Key Manager"),(0,s.kt)("p",null,"Lastly, we need to send the transaction that will update the URD and its permissions on the Universal Profile via the Key Manager."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Execute the calldata on the Universal Profile via the Key Manager"',title:'"Execute',the:!0,calldata:!0,on:!0,Universal:!0,Profile:!0,via:!0,Key:!0,'Manager"':!0},"// execute the `setDataCalldata` on the Key Manager\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Execute the calldata on the Universal Profile via the Key Manager"',title:'"Execute',the:!0,calldata:!0,on:!0,Universal:!0,Profile:!0,via:!0,Key:!0,'Manager"':!0},"// execute the `setDataCalldata` on the Key Manager\nawait keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n")))),(0,s.kt)("h3",{id:"final-code-1"},"Final code"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the URD of the Universal Profile and its permissions"',title:'"Update',the:!0,URD:!0,of:!0,Universal:!0,Profile:!0,and:!0,its:!0,'permissions"':!0},"const updateUniversalProfileURD = async (vaultURDAddress) => {\n  // create an instance of the Universal Profile\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // get the owner of the Universal Profile\n  // in our case it should be the address of the Key Manager\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // create an instance of the Key Manager\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  const addressPermissionsOldArrayLengthHex = await myUP.methods[\n    'getData(bytes32)'\n  ](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\n  const addressPermissionsNewArrayLength =\n    web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n    web3.utils.numberToHex(addressPermissionsNewArrayLength),\n    64,\n  );\n\n  // bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // encode setData Calldata on the Universal Profile\n  const setDataCalldata = await universalProfile.methods[\n    'setData(bytes32[],bytes[])'\n  ](dataKeys, dataValues).encodeABI();\n\n  // execute the `setDataCalldata` on the Key Manager\n  await keyManager.methods['execute(bytes)'](setDataCalldata).send({\n    from: EOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// update the URD of the Universal profile\nawait updateUniversalProfileURD(vaultURDAddress);\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the URD of the Universal Profile and its permissions"',title:'"Update',the:!0,URD:!0,of:!0,Universal:!0,Profile:!0,and:!0,its:!0,'permissions"':!0},"const updateUniversalProfileURD = async (vaultURDAddress) => {\n  // create an instance of the Universal Profile\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n  // get the owner of the Universal Profile\n  // in our case it should be the address of the Key Manager\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // create an instance of the Key Manager\n  const keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n  const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  );\n\n  const addressPermissionsNewArrayLength =\n    ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex =\n    '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n  // bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // encode setData Calldata on the Universal Profile\n  const setDataCalldata = await universalProfile.interface.encodeFunctionData(\n    'setData(bytes32[],bytes[])',\n    [dataKeys, dataValues],\n  );\n\n  // execute the `setDataCalldata` on the Key Manager\n  await keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n};\n\n// update the URD of the Universal profile\nawait updateUniversalProfileURD(vaultURDAddress);\n")))),(0,s.kt)("h2",{id:"final-code---deploy--update"},"Final code - Deploy & Update"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a Universal Profile URD, update its permissions and add it to the Universal Profile"',title:'"Deploy',a:!0,Universal:!0,Profile:!0,"URD,":!0,update:!0,its:!0,permissions:!0,and:!0,add:!0,it:!0,to:!0,the:!0,'Profile"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n\nconst deployUniversalProfileURD = async () => {\n  // create an instance of the LSP1UniversalReceiverDelegateUP\n  let universalProfileURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateUP.abi,\n  );\n\n  // deploy the Universal Receiver Delegate UP contract\n  const universalProfileURDAddress = await universalProfileURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateUP.bytecode,\n    })\n    .send({\n      from: EOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return universalProfileURDAddress;\n};\n\nconst updateUniversalProfileURD = async (vaultURDAddress) => {\n  // create an instance of the Universal Profile\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // get the owner of the Universal Profile\n  // in our case it should be the address of the Key Manager\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // create an instance of the Key Manager\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  const addressPermissionsOldArrayLengthHex = await myUP.methods[\n    'getData(bytes32)'\n  ](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\n  const addressPermissionsNewArrayLength =\n    web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n    web3.utils.numberToHex(addressPermissionsNewArrayLength),\n    64,\n  );\n\n  // bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // encode setData Calldata on the Universal Profile\n  const setDataCalldata = await universalProfile.methods[\n    'setData(bytes32[],bytes[])'\n  ](dataKeys, dataValues).encodeABI();\n\n  // execute the `setDataCalldata` on the Key Manager\n  await keyManager.methods['execute(bytes)'](setDataCalldata).send({\n    from: EOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// deploy a new Universal Profile URD and retrieve its address\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n\n// update the URD of the Universal profile\nawait updateUniversalProfileURD(vaultURDAddress);\n"))),(0,s.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a Universal Profile URD, update its permissions and add it to the Universal Profile"',title:'"Deploy',a:!0,Universal:!0,Profile:!0,"URD,":!0,update:!0,its:!0,permissions:!0,and:!0,add:!0,it:!0,to:!0,the:!0,'Profile"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst deployUniversalProfileURD = async () => {\n  // create a LSP1UniversalReceiverDelegateUP Contract Factory\n  let universalProfileURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateUP.abi,\n    LSP1UniversalReceiverDelegateUP.bytecode,\n  );\n\n  // deploy the Universal Receiver Delegate UP contract\n  const universalProfileURD = await universalProfileURDFactory\n    .connect(EOA)\n    .deploy();\n\n  return universalProfileURD.target;\n};\n\nconst updateUniversalProfileURD = async (vaultURDAddress) => {\n  // create an instance of the Universal Profile\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n  // get the owner of the Universal Profile\n  // in our case it should be the address of the Key Manager\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // create an instance of the Key Manager\n  const keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n  const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  );\n\n  const addressPermissionsNewArrayLength =\n    ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex =\n    '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n  // bytes16 index `addressPermissionsOldArrayLengthHex` will serve as index\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // encode setData Calldata on the Universal Profile\n  const setDataCalldata = await universalProfile.interface.encodeFunctionData(\n    'setData(bytes32[],bytes[])',\n    [dataKeys, dataValues],\n  );\n\n  // execute the `setDataCalldata` on the Key Manager\n  await keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n};\n\n// deploy a new Universal Profile URD and retrieve its address\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n\n// update the URD of the Universal profile\nawait updateUniversalProfileURD(vaultURDAddress);\n")))))}m.isMDXComponent=!0},1704:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/token-transfer-4-7db56efafbc48ac08f9d8a37985e31de.jpg"}}]);